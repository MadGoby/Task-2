(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["form-elements~landing-page~room-details~search-room"],{

/***/ "./blocks/datepicker/datepicker-init.js":
/*!**********************************************!*\
  !*** ./blocks/datepicker/datepicker-init.js ***!
  \**********************************************/
/*! exports provided: initAllDatepickers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initAllDatepickers\", function() { return initAllDatepickers; });\n/* harmony import */ var _datepicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datepicker */ \"./blocks/datepicker/datepicker.js\");\n\r\n\r\nfunction initAllDatepickers() {\r\n  [...document.querySelectorAll('.js-datepicker')].forEach((container) => {\r\n    const settings = {\r\n      monthRu: [\r\n        'Январь',\r\n        'Февраль',\r\n        'Март',\r\n        'Апрель',\r\n        'Май',\r\n        'Июнь',\r\n        'Июль',\r\n        'Август',\r\n        'Сентябрь',\r\n        'Октябрь',\r\n        'Ноябрь',\r\n        'Декабрь',\r\n      ],\r\n    };\r\n    if (container.hasAttribute('data-year')) settings.pickedYear = container.getAttribute('data-year');\r\n    if (container.hasAttribute('data-month')) settings.pickedMonth = container.getAttribute('data-month');\r\n    if (container.hasAttribute('data-day')) settings.currentDay = new Date(container.getAttribute('data-day'));\r\n    if (container.hasAttribute('data-from')) settings.dataFrom = new Date(container.getAttribute('data-from'));\r\n    if (container.hasAttribute('data-to')) settings.dataTo = new Date(container.getAttribute('data-to'));\r\n    new _datepicker__WEBPACK_IMPORTED_MODULE_0__[\"Datepicker\"](container, settings);\r\n  });\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./blocks/datepicker/datepicker-init.js?");

/***/ }),

/***/ "./blocks/datepicker/datepicker.js":
/*!*****************************************!*\
  !*** ./blocks/datepicker/datepicker.js ***!
  \*****************************************/
/*! exports provided: Datepicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Datepicker\", function() { return Datepicker; });\nclass Datepicker {\r\n  constructor(target, templates) {\r\n    this.container = target;\r\n    this.settings = { monthRu: templates.monthRu };\r\n    if (templates.pickedYear) {\r\n      this.settings.pickedYear = Number(templates.pickedYear);\r\n    } else {\r\n      this.settings.pickedYear = new Date().getFullYear();\r\n    }\r\n    if (templates.pickedMonth) {\r\n      this.settings.pickedMonth = Number(templates.pickedMonth);\r\n    } else {\r\n      this.settings.pickedMonth = new Date().getMonth();\r\n    }\r\n    if (templates.currentDay) {\r\n      this.settings.currentDay = templates.currentDay;\r\n    } else {\r\n      this.settings.currentDay = new Date();\r\n    }\r\n    if (templates.dataFrom) {\r\n      this.settings.from = templates.dataFrom;\r\n    } else {\r\n      this.settings.from = false;\r\n    }\r\n    if (templates.dataTo) {\r\n      this.settings.to = templates.dataTo;\r\n    } else {\r\n      this.settings.to = false;\r\n    }\r\n    this.getHtmlElements();\r\n    const calendarDays = this.makesCalendarByDate({ year: this.settings.pickedYear, month: this.settings.pickedMonth });\r\n    this.refreshCalendar(calendarDays);\r\n    this.refreshSelectedMonth(this.settings.pickedMonth, this.settings.pickedYear);\r\n    this.bindObjectLink();\r\n    this.bindEventListeners();\r\n    this.bindCalendarCellsListener();\r\n    console.log(this);\r\n  }\r\n\r\n  getHtmlElements() {\r\n    this.calendarWrapper = this.container.querySelector('.datepicker__calendar-wrapper');\r\n    this.inputFrom = this.container.querySelector('.js-input__field_from');\r\n    this.inputTo = this.container.querySelector('.js-input__field_to');\r\n    this.inputTotal = this.container.querySelector('.js-input__field_total');\r\n    this.buttonPrevious = this.container.querySelector('.js-datepicker__scroll-button_arrow_back');\r\n    this.buttonNext = this.container.querySelector('.js-datepicker__scroll-button_arrow_forward');\r\n    this.selectedMonth = this.container.querySelector('.js-datepicker__selected-month');\r\n    this.calendar = this.container.querySelector('.js-datepicker__calendar');\r\n    this.lines = [...this.container.querySelectorAll('.js-datepicker__calendar-line')];\r\n    this.clearButton = this.container.querySelector('.js-datepicker__clear-button');\r\n    this.applyButton = this.container.querySelector('.js-datepicker__apply-button');\r\n\r\n    this.currentInputTarget = this.inputFrom;\r\n    if (this.inputTotal) {\r\n      this.currentInputTarget = this.inputTotal;\r\n    } else {\r\n      this.currentInputTarget = this.inputFrom;\r\n    }\r\n    if (this.calendarWrapper.classList.contains('datepicker__calendar-wrapper_size_small')) {\r\n      this.size = 'small';\r\n    } else {\r\n      this.size = false;\r\n    }\r\n    this.currentValueTarget = 'from';\r\n  }\r\n\r\n  makesCalendarByDate(data) {\r\n    const { year, month } = data;\r\n    const calendarDays = [];\r\n\r\n    let makeCalendarCell = (date, whatMonth) => {\r\n      const calendarCell = document.createElement('td');\r\n      calendarCell.classList.add('datepicker__calendar-cell');\r\n\r\n      if (this.size === 'small') {\r\n        calendarCell.classList.add('datepicker__calendar-cell_size_small');\r\n      }\r\n\r\n      if (whatMonth === 'next') {\r\n        calendarCell.classList.add('datepicker__calendar-cell_transparent');\r\n        calendarCell.setAttribute('data-month', 'next');\r\n      } else if (whatMonth === 'previous') {\r\n        calendarCell.classList.add('datepicker__calendar-cell_transparent');\r\n        calendarCell.setAttribute('data-month', 'previous');\r\n      }\r\n\r\n      function checkMatchByDay(day) {\r\n        return (\r\n          day.getFullYear() === date.getFullYear() &&\r\n          day.getMonth() === date.getMonth() &&\r\n          day.getDate() === date.getDate()\r\n        );\r\n      }\r\n\r\n      let checkRangeMatch = () => date >= this.settings.from && date <= this.settings.to;\r\n      checkRangeMatch = checkRangeMatch.bind(this);\r\n\r\n      if (checkMatchByDay(this.settings.currentDay)) {\r\n        calendarCell.classList.add('datepicker__calendar-cell_color_green');\r\n      }\r\n\r\n      if (this.settings.from) {\r\n        if (checkMatchByDay(this.settings.from)) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_color_purple');\r\n        }\r\n      }\r\n\r\n      if (this.settings.to) {\r\n        if (checkMatchByDay(this.settings.to)) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_color_purple');\r\n        }\r\n      }\r\n\r\n      if (this.settings.from && this.settings.to) {\r\n        if (checkRangeMatch() && checkMatchByDay(this.settings.from)) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_right-half_shaded');\r\n        } else if (checkRangeMatch() && checkMatchByDay(this.settings.to)) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_left-half_shaded');\r\n        } else if (checkRangeMatch()) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_shaded');\r\n        }\r\n      }\r\n\r\n      calendarCell.innerText = date.getDate();\r\n      return calendarCell;\r\n    };\r\n\r\n    let getPreviousMonthDays = () => {\r\n      const previousDay = new Date(year, month, 0).getDay();\r\n\r\n      for (let i = previousDay - 1; i >= 0; i -= 1) {\r\n        const date = new Date(year, month, -i);\r\n        calendarDays.push(makeCalendarCell(date, 'previous'));\r\n      }\r\n    };\r\n    getPreviousMonthDays = getPreviousMonthDays.bind(this);\r\n\r\n    let getCurrentMonthDays = () => {\r\n      const lastDay = new Date(year, month + 1, 0).getDate();\r\n\r\n      for (let i = 1; i <= lastDay; i += 1) {\r\n        const date = new Date(year, month, i);\r\n        calendarDays.push(makeCalendarCell(date, false));\r\n      }\r\n    };\r\n    getCurrentMonthDays = getCurrentMonthDays.bind(this);\r\n\r\n    let getNextMonthDays = () => {\r\n      let nextMonthDay = new Date(year, month + 1).getDay();\r\n\r\n      if (nextMonthDay === 0) {\r\n        nextMonthDay = 7;\r\n      }\r\n\r\n      let day = 1;\r\n      for (let i = nextMonthDay; i <= 7; i += 1) {\r\n        const date = new Date(year, month + 1, day);\r\n        calendarDays.push(makeCalendarCell(date, 'next'));\r\n        day += 1;\r\n      }\r\n    };\r\n    getNextMonthDays = getNextMonthDays.bind(this);\r\n\r\n    makeCalendarCell = makeCalendarCell.bind(this);\r\n\r\n    if (new Date(year, month).getDay() !== 1) {\r\n      getPreviousMonthDays();\r\n    }\r\n\r\n    getCurrentMonthDays();\r\n\r\n    if (new Date(year, month + 1, 0).getDay() !== 0) {\r\n      getNextMonthDays();\r\n    }\r\n\r\n    return calendarDays;\r\n  }\r\n\r\n  refreshCalendar(days) {\r\n    let line = 0;\r\n    let i = 0;\r\n\r\n    while (i < days.length) {\r\n      this.lines[line].append(days[i]);\r\n      i += 1;\r\n      if (Number.isInteger(i / 7) && i !== 0) {\r\n        line += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearCalendar() {\r\n    this.lines.forEach((item) => {\r\n      const line = item;\r\n      line.innerHTML = '';\r\n    });\r\n  }\r\n\r\n  refreshSelectedMonth(month, year) {\r\n    this.selectedMonth.innerText = `${this.settings.monthRu[month]} ${year}`;\r\n  }\r\n\r\n  checkDateForValidity(value, date) {\r\n    const pickedDate = new Date(date.year, date.month - 1, date.day);\r\n    const nextDate = new Date(\r\n      this.settings.currentDay.getFullYear(),\r\n      this.settings.currentDay.getMonth(),\r\n      this.settings.currentDay.getDate() + 1\r\n    );\r\n    let result = false;\r\n\r\n    if (this.currentInputTarget === this.inputFrom && this.currentInputTarget) {\r\n      if (pickedDate > this.settings.currentDay) {\r\n        this.currentInputTarget.setAttribute('value', value);\r\n        this.settings.from = new Date(date.year, date.month - 1, date.day);\r\n\r\n        if (pickedDate > this.settings.to) {\r\n          this.inputTo.setAttribute('value', '');\r\n          this.settings.to = undefined;\r\n        }\r\n\r\n        this.currentInputTarget = this.inputTo;\r\n        result = true;\r\n      }\r\n    } else if (this.currentInputTarget === this.inputTo && this.currentInputTarget) {\r\n      if (this.settings.from) {\r\n        if (pickedDate > this.settings.from) {\r\n          this.currentInputTarget.setAttribute('value', value);\r\n          this.settings.to = new Date(date.year, date.month - 1, date.day);\r\n          this.currentInputTarget = this.inputFrom;\r\n          result = true;\r\n        }\r\n      } else if (pickedDate > nextDate) {\r\n        this.currentInputTarget.setAttribute('value', value);\r\n        this.settings.to = new Date(date.year, date.month - 1, date.day);\r\n        result = true;\r\n      }\r\n    } else if (this.currentInputTarget === this.inputTotal || !this.currentInputTarget) {\r\n      if (this.currentValueTarget === 'from') {\r\n        if (pickedDate > this.settings.currentDay) {\r\n          this.settings.from = new Date(date.year, date.month - 1, date.day);\r\n          this.currentValueTarget = 'to';\r\n          if (pickedDate > this.settings.to) {\r\n            this.settings.to = undefined;\r\n          }\r\n          result = true;\r\n        }\r\n      } else if (pickedDate > nextDate && pickedDate > this.settings.from) {\r\n        this.settings.to = new Date(date.year, date.month - 1, date.day);\r\n        this.currentValueTarget = 'from';\r\n        result = true;\r\n      }\r\n      const transformedFrom = `${this.settings.from.getDate()} ${this.settings.monthRu[this.settings.from.getMonth()]\r\n        .slice(0, 3)\r\n        .toLowerCase()}`;\r\n      let transformedto = '...';\r\n      if (this.settings.to)\r\n        transformedto = `${this.settings.to.getDate()} ${this.settings.monthRu[this.settings.to.getMonth()]\r\n          .slice(0, 3)\r\n          .toLowerCase()}`;\r\n      const mainValue = `${transformedFrom} - ${transformedto}`;\r\n      if (this.currentInputTarget) this.currentInputTarget.setAttribute('value', mainValue);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  calendarCellClick(event) {\r\n    const { target } = event;\r\n\r\n    function leadsToDoubleDigit(value) {\r\n      if (+value < 10) {\r\n        return `0${value}`;\r\n      }\r\n      return `${value}`;\r\n    }\r\n\r\n    let definesMonthOfSelectedDate = () => {\r\n      if (target.getAttribute('data-month') === 'next') {\r\n        return this.settings.pickedMonth + 2;\r\n      }\r\n      if (target.getAttribute('data-month') === 'previous') {\r\n        return this.settings.pickedMonth;\r\n      }\r\n      return this.settings.pickedMonth + 1;\r\n    };\r\n    definesMonthOfSelectedDate = definesMonthOfSelectedDate.bind(this);\r\n\r\n    const monthforOutput = definesMonthOfSelectedDate();\r\n    const date = {\r\n      day: leadsToDoubleDigit(target.innerText),\r\n      month: leadsToDoubleDigit(monthforOutput),\r\n      year: this.settings.pickedYear,\r\n    };\r\n\r\n    const value = `${date.day}.${date.month}.${date.year}`;\r\n\r\n    const result = this.checkDateForValidity(value, date);\r\n    if (result) {\r\n      this.settings.pickedYear = new Date(this.settings.pickedYear, this.settings.pickedMonth).getFullYear();\r\n      this.settings.pickedMonth = new Date(this.settings.pickedYear, this.settings.pickedMonth).getMonth();\r\n      this.clearCalendar();\r\n      const days = this.makesCalendarByDate({ year: this.settings.pickedYear, month: this.settings.pickedMonth });\r\n      this.refreshCalendar(days);\r\n      this.refreshSelectedMonth(this.settings.pickedMonth, this.settings.pickedYear);\r\n    }\r\n\r\n    const calendarCells = [...this.calendar.querySelectorAll('td')];\r\n    calendarCells.forEach((item) => {\r\n      const cell = item;\r\n      cell.addEventListener('click', this.calendarCellClick);\r\n    });\r\n  }\r\n\r\n  bindCalendarCellsListener() {\r\n    const calendarCells = [...this.calendar.querySelectorAll('td')];\r\n\r\n    calendarCells.forEach((item) => {\r\n      const cell = item;\r\n      cell.addEventListener('click', this.calendarCellClick);\r\n    });\r\n  }\r\n\r\n  refreshDatepicker(date) {\r\n    this.settings.pickedYear = date.getFullYear();\r\n    this.settings.pickedMonth = date.getMonth();\r\n    this.clearCalendar();\r\n    const days = this.makesCalendarByDate({ year: this.settings.pickedYear, month: this.settings.pickedMonth });\r\n    this.refreshCalendar(days);\r\n    this.refreshSelectedMonth(this.settings.pickedMonth, this.settings.pickedYear);\r\n    this.bindCalendarCellsListener();\r\n  }\r\n\r\n  nextMonthButtonClick() {\r\n    const newDate = new Date(this.settings.pickedYear, Number(this.settings.pickedMonth) + 1);\r\n    this.refreshDatepicker(newDate);\r\n  }\r\n\r\n  previousMonthButtonClick() {\r\n    const newDate = new Date(this.settings.pickedYear, Number(this.settings.pickedMonth) - 1);\r\n    this.refreshDatepicker(newDate);\r\n  }\r\n\r\n  inputsExists() {\r\n    return this.inputTotal || this.inputFrom || this.inputTo;\r\n  }\r\n\r\n  clearButtonClick() {\r\n    if (this.settings.from) {\r\n      this.settings.from = undefined;\r\n    }\r\n\r\n    if (this.settings.to) {\r\n      this.settings.to = undefined;\r\n    }\r\n\r\n    if (this.inputsExists()) {\r\n      if (this.currentInputTarget === this.inputTotal) {\r\n        this.inputTotal.setAttribute('value', 'ДД.ММ - ДД.ММ');\r\n      } else {\r\n        this.inputFrom.setAttribute('value', 'ДД.ММ.ГГГГ');\r\n        this.inputTo.setAttribute('value', 'ДД.ММ.ГГГГ');\r\n        this.currentInputTarget = this.inputFrom;\r\n      }\r\n    }\r\n    this.currentValueTarget = 'from';\r\n    this.refreshDatepicker(new Date(this.settings.pickedYear, this.settings.pickedMonth));\r\n  }\r\n\r\n  applyButtonClick() {\r\n    if (this.inputsExists()) this.calendarWrapper.setAttribute('hidden', 'hidden');\r\n    if (this.inputFrom) this.inputFrom.classList.remove('input__field_active');\r\n    if (this.inputTo) this.inputTo.classList.remove('input__field_active');\r\n    if (this.inputTotal) this.inputTotal.classList.remove('input__field_active');\r\n  }\r\n\r\n  inputClick() {\r\n    if (this.calendarWrapper.hasAttribute('hidden', 'hidden')) {\r\n      if (this.inputFrom) this.inputFrom.classList.add('input__field_active');\r\n      if (this.inputTo) this.inputTo.classList.add('input__field_active');\r\n      if (this.inputTotal) this.inputTotal.classList.add('input__field_active');\r\n      this.calendarWrapper.removeAttribute('hidden', 'hidden');\r\n    } else {\r\n      if (this.inputFrom) this.inputFrom.classList.remove('input__field_active');\r\n      if (this.inputTo) this.inputTo.classList.remove('input__field_active');\r\n      if (this.inputTotal) this.inputTotal.classList.remove('input__field_active');\r\n      this.calendarWrapper.setAttribute('hidden', 'hidden');\r\n    }\r\n  }\r\n\r\n  bindObjectLink() {\r\n    this.inputClick = this.inputClick.bind(this);\r\n    this.makesCalendarByDate = this.makesCalendarByDate.bind(this);\r\n    this.refreshCalendar = this.refreshCalendar.bind(this);\r\n    this.refreshSelectedMonth = this.refreshSelectedMonth.bind(this);\r\n    this.previousMonthButtonClick = this.previousMonthButtonClick.bind(this);\r\n    this.nextMonthButtonClick = this.nextMonthButtonClick.bind(this);\r\n    this.clearButtonClick = this.clearButtonClick.bind(this);\r\n    this.applyButtonClick = this.applyButtonClick.bind(this);\r\n    this.calendarCellClick = this.calendarCellClick.bind(this);\r\n  }\r\n\r\n  bindEventListeners() {\r\n    this.buttonPrevious.addEventListener('click', this.previousMonthButtonClick);\r\n    this.buttonNext.addEventListener('click', this.nextMonthButtonClick);\r\n    this.clearButton.addEventListener('click', this.clearButtonClick);\r\n    this.applyButton.addEventListener('click', this.applyButtonClick);\r\n    if (this.inputFrom) this.inputFrom.addEventListener('click', this.inputClick);\r\n    if (this.inputTo) this.inputTo.addEventListener('click', this.inputClick);\r\n    if (this.inputTotal) this.inputTotal.addEventListener('click', this.inputClick);\r\n  }\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./blocks/datepicker/datepicker.js?");

/***/ }),

/***/ "./blocks/dropdown/dropdown-init.js":
/*!******************************************!*\
  !*** ./blocks/dropdown/dropdown-init.js ***!
  \******************************************/
/*! exports provided: initAllDropdowns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initAllDropdowns\", function() { return initAllDropdowns; });\n/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown */ \"./blocks/dropdown/dropdown.js\");\n\r\n\r\nfunction initAllDropdowns() {\r\n  [...document.querySelectorAll('.js-dropdown')].forEach((container) => {\r\n    const templates = {\r\n      rooms: [\r\n        ['спал', 'ьня', 'ьни', 'ен'],\r\n        ['кроват', 'ь', 'и', 'ей'],\r\n        ['ванн', 'ая', 'ые', 'ых'],\r\n      ],\r\n      guestsWithBaby: [\r\n        ['гост', 'ь', 'я', 'ей'],\r\n        ['младен', 'ец', 'ца', 'ев'],\r\n      ],\r\n      guests: ['гост', 'ь', 'я', 'ей'],\r\n      guestsDefault: 'Сколько гостей',\r\n      guestsWithBabyDefault: 'Сколько гостей',\r\n      roomsDefault: 'Конфигурация номера',\r\n    };\r\n    new _dropdown__WEBPACK_IMPORTED_MODULE_0__[\"Dropdown\"]({ container, templates });\r\n  });\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./blocks/dropdown/dropdown-init.js?");

/***/ }),

/***/ "./blocks/dropdown/dropdown.js":
/*!*************************************!*\
  !*** ./blocks/dropdown/dropdown.js ***!
  \*************************************/
/*! exports provided: Dropdown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Dropdown\", function() { return Dropdown; });\nclass Dropdown {\r\n  constructor(settings) {\r\n    this.container = settings.container;\r\n    this.templates = settings.templates;\r\n\r\n    this.getHtmlElements();\r\n    this.checkClearButtonVisibility();\r\n    this.bindObjectLink();\r\n    this.bindEventListeners();\r\n  }\r\n\r\n  getHtmlElements() {\r\n    this.input = this.container.querySelector('.js-input__field');\r\n    this.dropdown = this.container.querySelector('.js-dropdown__control');\r\n    this.plusButtons = [...this.container.querySelectorAll('.dropdown__button')].filter(\r\n      (button) => button.getAttribute('data-action') === 'plus'\r\n    );\r\n    this.minusButtons = [...this.container.querySelectorAll('.dropdown__button')].filter(\r\n      (button) => button.getAttribute('data-action') === 'minus'\r\n    );\r\n    this.outputs = [...this.container.querySelectorAll('.dropdown__output')];\r\n    this.clearButton = this.container.querySelector('.dropdown__clear-button');\r\n    this.submitButton = this.container.querySelector('.dropdown__submit-button');\r\n  }\r\n\r\n  checkClearButtonVisibility() {\r\n    function isPositive(number) {\r\n      return number > 0;\r\n    }\r\n\r\n    if (this.outputs.some((output) => isPositive(output.textContent))) {\r\n      this.clearButton.style.display = 'inline-block';\r\n    } else if (!this.clearButton.hasAttribute('hidden')) {\r\n      this.clearButton.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  inputClicked() {\r\n    this.dropdown.toggleAttribute('hidden');\r\n    this.input.classList.toggle('input__field_expanded');\r\n  }\r\n\r\n  wordEndCheck(value, template, line) {\r\n    function isEqualToZero(num) {\r\n      return num % 10 === 0;\r\n    }\r\n\r\n    function fromOneToFour() {\r\n      return isEqualToZero(value - 2) || isEqualToZero(value - 3) || isEqualToZero(value - 4);\r\n    }\r\n\r\n    let index;\r\n\r\n    if (value > 4 && value < 21) {\r\n      index = 3;\r\n    } else if (value === 1 || isEqualToZero(value - 1)) {\r\n      index = 1;\r\n    } else if (fromOneToFour()) {\r\n      index = 2;\r\n    } else {\r\n      index = 3;\r\n    }\r\n\r\n    if (this.container.getAttribute('data-output') === 'sum') {\r\n      return this.templates[template][index];\r\n    }\r\n    return this.templates[template][line][index];\r\n  }\r\n\r\n  setDefaultIfZero() {\r\n    const outputValue =\r\n      Number(this.outputs[0].textContent) + Number(this.outputs[1].textContent) + Number(this.outputs[2].textContent);\r\n    const template = this.container.getAttribute('data-template');\r\n    if (outputValue === 0) this.input.value = `${this.templates[`${template}Default`]}`;\r\n  }\r\n\r\n  prepareOutputSum() {\r\n    const outputValue =\r\n      Number(this.outputs[0].textContent) + Number(this.outputs[1].textContent) + Number(this.outputs[2].textContent);\r\n    const template = this.container.getAttribute('data-template');\r\n    let output;\r\n    if (outputValue > 0) {\r\n      output = `${outputValue} ${this.templates[template][0]}${this.wordEndCheck(outputValue, template)}`;\r\n    } else {\r\n      output = `${this.templates[`${template}Default`]}`;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  prepareTwoByOne() {\r\n    const valuesSum =\r\n      Number(this.outputs[0].textContent) + Number(this.outputs[1].textContent) + Number(this.outputs[2].textContent);\r\n    const values = this.outputs.map((value) => value.textContent);\r\n    const template = this.container.getAttribute('data-template');\r\n    let output = '';\r\n    if (valuesSum > 0) {\r\n      this.outputs.forEach((value, index) => {\r\n        const iteration = () => {\r\n          if (index === 0) {\r\n            const valueText = Number(value.textContent) + Number(values[1]);\r\n            output += `${valueText} ${this.templates[template][index][0]}${this.wordEndCheck(\r\n              valueText,\r\n              template,\r\n              index\r\n            )}`;\r\n            if (valuesSum - valueText === 0) {\r\n              output += '...';\r\n            } else {\r\n              output += ', ';\r\n            }\r\n          } else if (index === 2) {\r\n            output += `${value.textContent} ${this.templates[template][1][0]}${this.wordEndCheck(\r\n              +value.textContent,\r\n              template,\r\n              1\r\n            )}`;\r\n            if (Number(values[0]) === 0) output += '...';\r\n          }\r\n        };\r\n\r\n        if (index === 0 && +values[0] + +values[1] > 0) iteration();\r\n        if (index === 2 && +value.textContent > 0) iteration();\r\n      });\r\n    } else {\r\n      output = `${this.templates[`${template}Default`]}`;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  prepareOneByOne() {\r\n    const valuesSum =\r\n      Number(this.outputs[0].textContent) + Number(this.outputs[1].textContent) + Number(this.outputs[2].textContent);\r\n    const values = this.outputs.map((value) => value.textContent);\r\n    const template = this.container.getAttribute('data-template');\r\n    let output = '';\r\n    if (valuesSum > 0) {\r\n      this.outputs.forEach((value, index) => {\r\n        const iteration = () => {\r\n          const valueText = value.innerText;\r\n          output += `${valueText} ${this.templates[template][index][0]}${this.wordEndCheck(\r\n            +valueText,\r\n            template,\r\n            index\r\n          )}`;\r\n          if (index === 0) {\r\n            if (valuesSum - values[0] === 0) {\r\n              output += '...';\r\n            } else {\r\n              output += ', ';\r\n            }\r\n          } else if (index === 1) {\r\n            if (Number(values[0]) === 0 && Number(values[2]) !== 0) {\r\n              output += ', ';\r\n            } else {\r\n              output += '...';\r\n            }\r\n          } else if (index === 2) output += '...';\r\n        };\r\n\r\n        const isLastNotThird = () => index === 2 && (+values[0] === 0 || +values[1] === 0);\r\n\r\n        if (isLastNotThird() && value.textContent > 0) {\r\n          iteration();\r\n        } else if (index !== 2 && value.textContent > 0) iteration();\r\n      });\r\n    } else {\r\n      output = `${this.templates[`${template}Default`]}`;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  refreshInput() {\r\n    let inputText;\r\n    const template = this.container.getAttribute('data-output');\r\n    if (template === 'oneByOne') {\r\n      inputText = this.prepareOneByOne();\r\n    } else if (template === 'twoByOne') {\r\n      inputText = this.prepareTwoByOne();\r\n    } else {\r\n      inputText = this.prepareOutputSum();\r\n    }\r\n    this.input.value = inputText;\r\n  }\r\n\r\n  plusButtonClicked(event) {\r\n    const buttonIndex = this.plusButtons.indexOf(event.target);\r\n    const outputTarget = this.outputs[buttonIndex];\r\n    if (outputTarget.innerText < 10) {\r\n      if (outputTarget.innerText === '0')\r\n        this.minusButtons[buttonIndex].classList.remove('dropdown__button_transparent');\r\n      outputTarget.innerText = Number(outputTarget.innerText) + 1;\r\n      if (outputTarget.innerText === '10') event.target.classList.add('dropdown__button_transparent');\r\n    }\r\n    this.checkClearButtonVisibility();\r\n    this.refreshInput();\r\n  }\r\n\r\n  minusButtonClicked(event) {\r\n    const buttonIndex = this.minusButtons.indexOf(event.target);\r\n    const outputTarget = this.outputs[buttonIndex];\r\n    if (outputTarget.innerText > 0) {\r\n      if (outputTarget.innerText === '10')\r\n        this.plusButtons[buttonIndex].classList.remove('dropdown__button_transparent');\r\n      outputTarget.innerText = Number(outputTarget.innerText) - 1;\r\n      if (outputTarget.innerText === '0') event.target.classList.add('dropdown__button_transparent');\r\n    }\r\n    this.checkClearButtonVisibility();\r\n    this.refreshInput();\r\n  }\r\n\r\n  clearButtonClicked() {\r\n    this.outputs.forEach((output) => {\r\n      output.textContent = 0;\r\n    });\r\n    this.minusButtons.forEach((button) => {\r\n      button.classList.add('dropdown__button_transparent');\r\n    });\r\n    this.plusButtons.forEach((button) => {\r\n      button.classList.remove('dropdown__button_transparent');\r\n    });\r\n    this.setDefaultIfZero();\r\n    this.checkClearButtonVisibility();\r\n  }\r\n\r\n  bindObjectLink() {\r\n    this.checkClearButtonVisibility = this.checkClearButtonVisibility.bind(this);\r\n    this.inputClicked = this.inputClicked.bind(this);\r\n    this.plusButtonClicked = this.plusButtonClicked.bind(this);\r\n    this.minusButtonClicked = this.minusButtonClicked.bind(this);\r\n    this.clearButtonClicked = this.clearButtonClicked.bind(this);\r\n    this.refreshInput = this.refreshInput.bind(this);\r\n    this.prepareOutputSum = this.prepareOutputSum.bind(this);\r\n    this.wordEndCheck = this.wordEndCheck.bind(this);\r\n    this.setDefaultIfZero = this.setDefaultIfZero.bind(this);\r\n    this.prepareOneByOne = this.prepareOneByOne.bind(this);\r\n    this.prepareTwoByOne = this.prepareTwoByOne.bind(this);\r\n  }\r\n\r\n  bindEventListeners() {\r\n    this.input.addEventListener('click', this.inputClicked);\r\n    this.clearButton.addEventListener('click', this.clearButtonClicked);\r\n    this.submitButton.addEventListener('click', this.inputClicked);\r\n    this.plusButtons.forEach((button) => button.addEventListener('click', this.plusButtonClicked));\r\n    this.minusButtons.forEach((button) => button.addEventListener('click', this.minusButtonClicked));\r\n  }\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./blocks/dropdown/dropdown.js?");

/***/ })

}]);