(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["cards~form-elements~landing-page~room-details~search-room"],{

/***/ "./blocks/datepicker/Datepicker.js":
/*!*****************************************!*\
  !*** ./blocks/datepicker/Datepicker.js ***!
  \*****************************************/
/*! exports provided: Datepicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(autoBind) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Datepicker\", function() { return Datepicker; });\nclass Datepicker {\r\n  constructor(target, templates) {\r\n    this.container = target;\r\n    this.templates = templates;\r\n    this.settings = { monthRu: templates.monthRu };\r\n\r\n    autoBind(this);\r\n    this.initializes();\r\n  }\r\n\r\n  initializes() {\r\n    this.setDefaultParameters();\r\n    this.getHtmlElements();\r\n    const calendarDays = this.makesCalendarByDate({\r\n      year: this.settings.pickedYear,\r\n      month: this.settings.pickedMonth,\r\n    });\r\n    this.refreshCalendar(calendarDays);\r\n    this.refreshSelectedMonth(this.settings.pickedMonth, this.settings.pickedYear);\r\n    this.bindEventListeners();\r\n    this.bindCalendarCellsListener();\r\n  }\r\n\r\n  setDefaultParameters() {\r\n    this.settings.pickedYear = this.templates.pickedYear ? Number(this.templates.pickedYear) : new Date().getFullYear();\r\n    this.settings.pickedMonth = this.templates.pickedMonth ? Number(this.templates.pickedMonth) : new Date().getMonth();\r\n    this.settings.currentDay = this.templates.currentDay ? this.templates.currentDay : new Date();\r\n    this.settings.from = this.templates.dataFrom ? this.templates.dataFrom : false;\r\n    this.settings.to = this.templates.dataTo ? this.templates.dataTo : false;\r\n  }\r\n\r\n  getHtmlElements() {\r\n    this.calendarWrapper = this.container.querySelector('.datepicker__calendar-wrapper');\r\n    this.inputFrom = this.container.querySelector('.js-input__field_from');\r\n    this.inputTo = this.container.querySelector('.js-input__field_to');\r\n    this.inputTotal = this.container.querySelector('.js-input__field_total');\r\n    this.buttonPrevious = this.container.querySelector('.js-datepicker__scroll-button_arrow_back');\r\n    this.buttonNext = this.container.querySelector('.js-datepicker__scroll-button_arrow_forward');\r\n    this.selectedMonth = this.container.querySelector('.js-datepicker__selected-month');\r\n    this.calendar = this.container.querySelector('.js-datepicker__calendar');\r\n    this.lines = [...this.container.querySelectorAll('.js-datepicker__calendar-line')];\r\n    this.clearButton = this.container.querySelector('.js-datepicker__clear-button');\r\n    this.applyButton = this.container.querySelector('.js-datepicker__apply-button');\r\n\r\n    if (this.inputTotal) {\r\n      this.currentInputTarget = this.inputTotal;\r\n    } else if (this.inputFrom) {\r\n      this.currentInputTarget = this.inputFrom;\r\n    } else {\r\n      this.currentInputTarget = 'noInput';\r\n    }\r\n\r\n    if (this.calendarWrapper.classList.contains('datepicker__calendar-wrapper_size_small')) {\r\n      this.size = 'small';\r\n    } else {\r\n      this.size = false;\r\n    }\r\n    this.currentValueTarget = 'from';\r\n  }\r\n\r\n  static checkIsMatchByDay(day, targetDate) {\r\n    return (\r\n      day.getFullYear() === targetDate.getFullYear() &&\r\n      day.getMonth() === targetDate.getMonth() &&\r\n      day.getDate() === targetDate.getDate()\r\n    );\r\n  }\r\n\r\n  checkIsCurrentDate(targetDate) {\r\n    return Datepicker.checkIsMatchByDay(this.settings.currentDay, targetDate);\r\n  }\r\n\r\n  checkIsFromDate(targetDate) {\r\n    return this.settings.from && Datepicker.checkIsMatchByDay(this.settings.from, targetDate);\r\n  }\r\n\r\n  checkIsToDate(targetDate) {\r\n    return this.settings.to && Datepicker.checkIsMatchByDay(this.settings.to, targetDate);\r\n  }\r\n\r\n  checkAreInSelectedRange(targetDate) {\r\n    return targetDate >= this.settings.from && targetDate <= this.settings.to;\r\n  }\r\n\r\n  highlightsSelectedRange(cell, targetDate) {\r\n    const isStartOfRange = this.checkAreInSelectedRange(targetDate) &&\r\n      Datepicker.checkIsMatchByDay(this.settings.from, targetDate);\r\n    const isEndOfRange = this.checkAreInSelectedRange(targetDate) &&\r\n      Datepicker.checkIsMatchByDay(this.settings.to, targetDate);\r\n\r\n    switch (true) {\r\n      case isStartOfRange:\r\n        cell.classList.add('datepicker__calendar-cell_right-half_shaded');\r\n        break;\r\n      case isEndOfRange:\r\n        cell.classList.add('datepicker__calendar-cell_left-half_shaded');\r\n        break;\r\n      case this.checkAreInSelectedRange(targetDate):\r\n        cell.classList.add('datepicker__calendar-cell_shaded');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return cell;\r\n  }\r\n\r\n  makeCalendarCell(date, targetMonth) {\r\n    let calendarCell = document.createElement('td');\r\n    calendarCell.classList.add('datepicker__calendar-cell');\r\n    if (this.size === 'small') calendarCell.classList.add('datepicker__calendar-cell_size_small');\r\n\r\n    if (targetMonth === 'next') {\r\n      calendarCell.classList.add('datepicker__calendar-cell_transparent');\r\n      calendarCell.setAttribute('data-month', 'next');\r\n    } else if (targetMonth === 'previous') {\r\n      calendarCell.classList.add('datepicker__calendar-cell_transparent');\r\n      calendarCell.setAttribute('data-month', 'previous');\r\n    }\r\n\r\n    const isRangeExist = this.settings.from && this.settings.to;\r\n\r\n    if (this.checkIsCurrentDate(date)) calendarCell.classList.add('datepicker__calendar-cell_color_green');\r\n    if (this.checkIsFromDate(date)) calendarCell.classList.add('datepicker__calendar-cell_color_purple');\r\n    if (this.checkIsToDate(date)) calendarCell.classList.add('datepicker__calendar-cell_color_purple');\r\n    if (isRangeExist) calendarCell = this.highlightsSelectedRange(calendarCell, date);\r\n\r\n    calendarCell.innerText = date.getDate();\r\n    return calendarCell;\r\n  };\r\n\r\n  getPreviousMonthDays(year, month) {\r\n    const days = [];\r\n    const previousDay = new Date(year, month, 0).getDay();\r\n\r\n    for (let i = previousDay - 1; i >= 0; i -= 1) {\r\n      const date = new Date(year, month, -i);\r\n      days.push(this.makeCalendarCell(date, 'previous'));\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  getCurrentMonthDays(year, month) {\r\n    const days = [];\r\n    const lastDay = new Date(year, month + 1, 0).getDate();\r\n\r\n    for (let i = 1; i <= lastDay; i += 1) {\r\n      const date = new Date(year, month, i);\r\n      days.push(this.makeCalendarCell(date, false));\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  getNextMonthDays(year, month) {\r\n    const days = [];\r\n    let nextMonthDay = new Date(year, month + 1).getDay();\r\n    let day = 1;\r\n    if (nextMonthDay === 0) nextMonthDay = 7;\r\n\r\n    for (let i = nextMonthDay; i <= 7; i += 1) {\r\n      const date = new Date(year, month + 1, day);\r\n      days.push(this.makeCalendarCell(date, 'next'));\r\n      day += 1;\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  makesCalendarByDate(data) {\r\n    const { year, month } = data;\r\n    let calendarDays = [];\r\n    const checkIsNeedPreviousMonth = () => new Date(year, month).getDay() !== 1;\r\n    const checkIsNeedNextMonth = () => new Date(year, month + 1, 0).getDay() !== 0;\r\n\r\n\r\n    if (checkIsNeedPreviousMonth()) calendarDays = calendarDays.concat(this.getPreviousMonthDays(year, month));\r\n    calendarDays = calendarDays.concat(this.getCurrentMonthDays(year, month));\r\n    if (checkIsNeedNextMonth()) calendarDays = calendarDays.concat(this.getNextMonthDays(year, month));\r\n\r\n    return calendarDays;\r\n  }\r\n\r\n  refreshCalendar(days) {\r\n    let line = 0;\r\n    let i = 0;\r\n\r\n    days.forEach(() => {\r\n      this.lines[line].append(days[i]);\r\n      i += 1;\r\n      if (i % 7 === 0 && i !== 0) line += 1;\r\n    });\r\n  }\r\n\r\n  clearCalendar() {\r\n    this.lines.forEach((line) => {\r\n      line.innerHTML = '';\r\n    });\r\n  }\r\n\r\n  refreshSelectedMonth(month, year) {\r\n    this.selectedMonth.innerText = `${this.settings.monthRu[month]} ${year}`;\r\n  }\r\n\r\n  passedValueToFrom(settings) {\r\n    const { pickedDate, value, date } = settings;\r\n    if (pickedDate <= this.settings.currentDay) return false;\r\n\r\n    this.currentInputTarget.setAttribute('value', value);\r\n    this.settings.from = new Date(date.year, date.month - 1, Number(date.day));\r\n\r\n    if (pickedDate > this.settings.to) {\r\n      this.inputTo.setAttribute('value', '');\r\n      this.settings.to = undefined;\r\n    }\r\n\r\n    this.currentInputTarget = this.inputTo;\r\n    return true;\r\n  }\r\n\r\n  passedValueToTo(settings) {\r\n    const { pickedDate, value, date } = settings;\r\n    const checkIsToLessThenFrom = () => this.settings.from && pickedDate <= this.settings.from;\r\n    if (checkIsToLessThenFrom()) return false;\r\n\r\n    this.currentInputTarget.setAttribute('value', value);\r\n    this.settings.to = new Date(date.year, date.month - 1, Number(date.day));\r\n    this.currentInputTarget = this.inputFrom;\r\n\r\n    return true;\r\n  }\r\n\r\n  passedValueToTotal(settings) {\r\n    const { pickedDate, date } = settings;\r\n\r\n    const checkIsFromLessCurrentDay = () => this.currentValueTarget === 'from' && pickedDate <= this.settings.currentDay;\r\n    const checkIsToLessThenFrom = () => this.currentValueTarget === 'to' &&\r\n      this.settings.from &&\r\n      pickedDate <= this.settings.from;\r\n    const isValidationPassed = checkIsFromLessCurrentDay() || checkIsToLessThenFrom();\r\n    if (isValidationPassed) return false;\r\n\r\n    const refreshFrom = () => {\r\n      this.settings.from = new Date(date.year, date.month - 1, Number(date.day));\r\n      this.currentValueTarget = 'to';\r\n      if (pickedDate > this.settings.to) this.settings.to = undefined;\r\n    };\r\n\r\n    if (this.currentValueTarget === 'from') {\r\n      refreshFrom();\r\n    } else {\r\n      this.settings.to = new Date(date.year, date.month - 1, Number(date.day));\r\n      this.currentValueTarget = 'from';\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  updateTotalInput() {\r\n    const getLowerMonth = (month) => this.settings.monthRu[month].slice(0, 3).toLowerCase();\r\n\r\n    const transformedFrom = `${this.settings.from.getDate()} ${getLowerMonth(this.settings.from.getMonth())}`;\r\n    let transformedTo = '...';\r\n\r\n    if (this.settings.to) {\r\n      transformedTo = `${this.settings.to.getDate()} ${getLowerMonth(this.settings.to.getMonth())}`;\r\n    }\r\n\r\n    const mainValue = `${transformedFrom} - ${transformedTo}`;\r\n    this.currentInputTarget.setAttribute('value', mainValue);\r\n  }\r\n\r\n  checkDateForValidity(value, date) {\r\n    const pickedDate = new Date(date.year, date.month - 1, date.day);\r\n    const isCurrentTotal = this.currentInputTarget === this.inputTotal;\r\n    const isNeedTotalRefresh = (result) => isCurrentTotal && result;\r\n    let result;\r\n\r\n    switch (true) {\r\n      case this.currentInputTarget === this.inputFrom:\r\n        result = this.passedValueToFrom({ pickedDate, value, date });\r\n        break;\r\n      case this.currentInputTarget === this.inputTo:\r\n        result = this.passedValueToTo({ pickedDate, value, date });\r\n        break;\r\n      default:\r\n        result = this.passedValueToTotal({ pickedDate, value, date });\r\n        if (isNeedTotalRefresh(result)) this.updateTotalInput();\r\n        break;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  definesCellMonth(target) {\r\n    let result;\r\n    switch (true) {\r\n      case target.getAttribute('data-month') === 'next':\r\n        result = this.settings.pickedMonth + 2;\r\n        break;\r\n      case target.getAttribute('data-month') === 'previous':\r\n        result = this.settings.pickedMonth;\r\n        break;\r\n      default:\r\n        result = this.settings.pickedMonth + 1;\r\n        break;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static bringToTwoDigits(settings) {\r\n    let { value } = settings;\r\n    if (value < 10) value = `0${value}`;\r\n    return value;\r\n  }\r\n\r\n  bindCalendarCellsListener() {\r\n    const calendarCells = [...this.calendar.querySelectorAll('.datepicker__calendar-cell')];\r\n\r\n    calendarCells.forEach((cell) => {\r\n      cell.addEventListener('click', this.handleCalendarCellClick);\r\n    });\r\n  }\r\n\r\n  handleCalendarCellClick(event) {\r\n    const { target } = event;\r\n    const date = {\r\n      day: Datepicker.bringToTwoDigits({ value: Number(target.innerText) }),\r\n      month: Datepicker.bringToTwoDigits({ value: Number(this.definesCellMonth(target)) }),\r\n      year: this.settings.pickedYear,\r\n    };\r\n    const value = `${date.day}.${date.month}.${date.year}`;\r\n    const result = this.checkDateForValidity(value, date);\r\n\r\n    if (result) {\r\n      this.settings.pickedYear = new Date(this.settings.pickedYear, this.settings.pickedMonth).getFullYear();\r\n      this.settings.pickedMonth = new Date(this.settings.pickedYear, this.settings.pickedMonth).getMonth();\r\n      this.clearCalendar();\r\n      const days = this.makesCalendarByDate({ year: this.settings.pickedYear, month: this.settings.pickedMonth });\r\n      this.refreshCalendar(days);\r\n      this.refreshSelectedMonth(this.settings.pickedMonth, this.settings.pickedYear);\r\n    }\r\n\r\n    this.bindCalendarCellsListener();\r\n  }\r\n\r\n  refreshDatepicker(date) {\r\n    this.settings.pickedYear = date.getFullYear();\r\n    this.settings.pickedMonth = date.getMonth();\r\n    this.clearCalendar();\r\n    const days = this.makesCalendarByDate({ year: this.settings.pickedYear, month: this.settings.pickedMonth });\r\n    this.refreshCalendar(days);\r\n    this.refreshSelectedMonth(this.settings.pickedMonth, this.settings.pickedYear);\r\n    this.bindCalendarCellsListener();\r\n  }\r\n\r\n  handleScrollButtonNextClick() {\r\n    const newDate = new Date(this.settings.pickedYear, Number(this.settings.pickedMonth) + 1);\r\n    this.refreshDatepicker(newDate);\r\n  }\r\n\r\n  handleScrollButtonBackClick() {\r\n    const newDate = new Date(this.settings.pickedYear, Number(this.settings.pickedMonth) - 1);\r\n    this.refreshDatepicker(newDate);\r\n  }\r\n\r\n  checkAreInputsExists() {\r\n    return this.inputTotal || this.inputFrom || this.inputTo;\r\n  }\r\n\r\n  resetsInputsToDefault() {\r\n    if (this.currentInputTarget === this.inputTotal) {\r\n      this.inputTotal.setAttribute('value', 'ДД.ММ - ДД.ММ');\r\n    } else {\r\n      this.inputFrom.setAttribute('value', 'ДД.ММ.ГГГГ');\r\n      this.inputTo.setAttribute('value', 'ДД.ММ.ГГГГ');\r\n      this.currentInputTarget = this.inputFrom;\r\n    }\r\n  }\r\n\r\n  handleClearButtonClick() {\r\n    if (this.settings.from) this.settings.from = undefined;\r\n    if (this.settings.to) this.settings.to = undefined;\r\n\r\n    if (this.checkAreInputsExists()) this.resetsInputsToDefault();\r\n\r\n    this.currentValueTarget = 'from';\r\n    this.refreshDatepicker(new Date(this.settings.pickedYear, this.settings.pickedMonth));\r\n  }\r\n\r\n  handleApplyButtonClick() {\r\n    if (this.checkAreInputsExists()) this.calendarWrapper.setAttribute('hidden', 'hidden');\r\n    if (this.inputFrom) this.inputFrom.classList.remove('input__field_active');\r\n    if (this.inputTo) this.inputTo.classList.remove('input__field_active');\r\n    if (this.inputTotal) this.inputTotal.classList.remove('input__field_active');\r\n  }\r\n\r\n  handleInputClick() {\r\n    if (this.calendarWrapper.hasAttribute('hidden')) {\r\n      if (this.inputFrom) this.inputFrom.classList.add('input__field_active');\r\n      if (this.inputTo) this.inputTo.classList.add('input__field_active');\r\n      if (this.inputTotal) this.inputTotal.classList.add('input__field_active');\r\n      this.calendarWrapper.removeAttribute('hidden', 'hidden');\r\n    } else {\r\n      if (this.inputFrom) this.inputFrom.classList.remove('input__field_active');\r\n      if (this.inputTo) this.inputTo.classList.remove('input__field_active');\r\n      if (this.inputTotal) this.inputTotal.classList.remove('input__field_active');\r\n      this.calendarWrapper.setAttribute('hidden', 'hidden');\r\n    }\r\n  }\r\n\r\n  bindEventListeners() {\r\n    this.buttonPrevious.addEventListener('click', this.handleScrollButtonBackClick);\r\n    this.buttonNext.addEventListener('click', this.handleScrollButtonNextClick);\r\n    this.clearButton.addEventListener('click', this.handleClearButtonClick);\r\n    this.applyButton.addEventListener('click', this.handleApplyButtonClick);\r\n    if (this.inputFrom) this.inputFrom.addEventListener('click', this.handleInputClick);\r\n    if (this.inputTo) this.inputTo.addEventListener('click', this.handleInputClick);\r\n    if (this.inputTotal) this.inputTotal.addEventListener('click', this.handleInputClick);\r\n  }\r\n}\r\n\r\n\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! auto-bind */ \"../node_modules/auto-bind/index.js\")))\n\n//# sourceURL=webpack:///./blocks/datepicker/Datepicker.js?");

/***/ }),

/***/ "./blocks/datepicker/datepickerInit.js":
/*!*********************************************!*\
  !*** ./blocks/datepicker/datepickerInit.js ***!
  \*********************************************/
/*! exports provided: initAllDatepickers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initAllDatepickers\", function() { return initAllDatepickers; });\n/* harmony import */ var _Datepicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Datepicker */ \"./blocks/datepicker/Datepicker.js\");\n\r\n\r\nfunction initAllDatepickers() {\r\n  [...document.querySelectorAll('.js-datepicker')].forEach((container) => {\r\n    const settings = {\r\n      monthRu: [\r\n        'Январь',\r\n        'Февраль',\r\n        'Март',\r\n        'Апрель',\r\n        'Май',\r\n        'Июнь',\r\n        'Июль',\r\n        'Август',\r\n        'Сентябрь',\r\n        'Октябрь',\r\n        'Ноябрь',\r\n        'Декабрь',\r\n      ],\r\n    };\r\n    if (container.hasAttribute('data-year')) settings.pickedYear = container.getAttribute('data-year');\r\n    if (container.hasAttribute('data-month')) settings.pickedMonth = container.getAttribute('data-month');\r\n    if (container.hasAttribute('data-day')) settings.currentDay = new Date(container.getAttribute('data-day'));\r\n    if (container.hasAttribute('data-from')) settings.dataFrom = new Date(container.getAttribute('data-from'));\r\n    if (container.hasAttribute('data-to')) settings.dataTo = new Date(container.getAttribute('data-to'));\r\n    new _Datepicker__WEBPACK_IMPORTED_MODULE_0__[\"Datepicker\"](container, settings);\r\n  });\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./blocks/datepicker/datepickerInit.js?");

/***/ }),

/***/ "./blocks/dropdown/Dropdown.js":
/*!*************************************!*\
  !*** ./blocks/dropdown/Dropdown.js ***!
  \*************************************/
/*! exports provided: Dropdown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(autoBind) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Dropdown\", function() { return Dropdown; });\nclass Dropdown {\r\n  constructor(settings) {\r\n    this.container = settings.container;\r\n    this.templates = settings.templates;\r\n\r\n    autoBind(this);\r\n    this.initializes();\r\n  }\r\n\r\n  initializes() {\r\n    this.getHtmlElements();\r\n    this.checkClearButtonVisibility();\r\n    this.bindEventListeners();\r\n  }\r\n\r\n  getHtmlElements() {\r\n    this.input = this.container.querySelector('.js-input__field');\r\n    this.dropdown = this.container.querySelector('.js-dropdown__control');\r\n    this.plusButtons = [...this.container.querySelectorAll('.dropdown__button')].filter(\r\n      (button) => button.getAttribute('data-action') === 'plus',\r\n    );\r\n    this.minusButtons = [...this.container.querySelectorAll('.dropdown__button')].filter(\r\n      (button) => button.getAttribute('data-action') === 'minus',\r\n    );\r\n    this.outputs = [...this.container.querySelectorAll('.dropdown__output')];\r\n    this.clearButton = this.container.querySelector('.dropdown__clear-button');\r\n    this.submitButton = this.container.querySelector('.dropdown__submit-button');\r\n  }\r\n\r\n  checkClearButtonVisibility() {\r\n    function isPositive(number) {\r\n      return number > 0;\r\n    }\r\n\r\n    const isNeedToDisplay = this.outputs.some((output) => isPositive(output.textContent));\r\n    const isNeedToHide = this.clearButton.hasAttribute('hidden') === false;\r\n\r\n    if (isNeedToDisplay) {\r\n      this.clearButton.style.display = 'inline-block';\r\n    } else if (isNeedToHide) {\r\n      this.clearButton.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  controlDropdownDisplay() {\r\n    this.dropdown.toggleAttribute('hidden');\r\n    this.input.classList.toggle('input__field_expanded');\r\n  }\r\n\r\n  definesWordEnd(value, template, line) {\r\n    function checkIsEqualToZero(num) {\r\n      return num % 10 === 0;\r\n    }\r\n\r\n    function checksComplianceFromOneToFour() {\r\n      return checkIsEqualToZero(value - 2) ||\r\n        checkIsEqualToZero(value - 3) ||\r\n        checkIsEqualToZero(value - 4);\r\n    }\r\n\r\n    let index;\r\n    const isMinimumValue = value === 1 || checkIsEqualToZero(value - 1);\r\n    const isInMiddleRange = value > 4 && value < 21;\r\n\r\n    switch (true) {\r\n      case isInMiddleRange:\r\n        index = 3;\r\n        break;\r\n      case isMinimumValue:\r\n        index = 1;\r\n        break;\r\n      case checksComplianceFromOneToFour():\r\n        index = 2;\r\n        break;\r\n      default:\r\n        index = 3;\r\n        break;\r\n    }\r\n\r\n    if (this.container.getAttribute('data-output') === 'sum') {\r\n      return this.templates[template][index];\r\n    }\r\n    return this.templates[template][line][index];\r\n  }\r\n\r\n  setDefault() {\r\n    const outputValue =\r\n      Number(this.outputs[0].textContent) + Number(this.outputs[1].textContent) + Number(this.outputs[2].textContent);\r\n    const template = this.container.getAttribute('data-template');\r\n    if (outputValue === 0) this.input.value = `${this.templates[`${template}Default`]}`;\r\n  }\r\n\r\n  prepareOutputSum() {\r\n    const outputValue =\r\n      Number(this.outputs[0].textContent) + Number(this.outputs[1].textContent) + Number(this.outputs[2].textContent);\r\n    const template = this.container.getAttribute('data-template');\r\n    let output;\r\n    if (outputValue > 0) {\r\n      output = `${outputValue} ${this.templates[template][0]}${this.definesWordEnd(outputValue, template)}`;\r\n    } else {\r\n      output = `${this.templates[`${template}Default`]}`;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  calculateTwoByOne(setting) {\r\n    const { valuesSum, values, template } = setting;\r\n    let output = '';\r\n\r\n    this.outputs.forEach((value, index) => {\r\n      const checkIsNeedEtc = (valueTextContent) => valuesSum - valueTextContent === 0 || Number(values[0]) === 0;\r\n      const addPunctuationMarks = (valueTextContent) => {\r\n        switch (true) {\r\n          case checkIsNeedEtc(valueTextContent):\r\n            output += '...';\r\n            break;\r\n          case index !== 2:\r\n            output += ', ';\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      };\r\n\r\n      const addDefinitionToNumber = () => {\r\n        if (index === 0) {\r\n          const valueText = Number(value.textContent) + Number(values[1]);\r\n          output += `${valueText} ${this.templates[template][index][0]}${this.definesWordEnd(\r\n            valueText,\r\n            template,\r\n            index,\r\n          )}`;\r\n          addPunctuationMarks(valueText);\r\n        } else if (index === 2) {\r\n          output += `${value.textContent} ${this.templates[template][1][0]}${this.definesWordEnd(\r\n            +value.textContent,\r\n            template,\r\n            1,\r\n          )}`;\r\n          addPunctuationMarks(false);\r\n        }\r\n      };\r\n\r\n      const areFirstDefinitionNeeded = index === 0 && +values[0] + +values[1] > 0;\r\n      const areLastDefinitionNeeded = index === 2 && +value.textContent > 0;\r\n\r\n      if (areFirstDefinitionNeeded) addDefinitionToNumber();\r\n      if (areLastDefinitionNeeded) addDefinitionToNumber();\r\n    });\r\n    return output;\r\n  }\r\n\r\n  prepareTwoByOne() {\r\n    const valuesSum =\r\n      Number(this.outputs[0].textContent) + Number(this.outputs[1].textContent) + Number(this.outputs[2].textContent);\r\n    const values = this.outputs.map((value) => value.textContent);\r\n    const template = this.container.getAttribute('data-template');\r\n    let output;\r\n\r\n    if (valuesSum > 0) {\r\n      output = this.calculateTwoByOne({ valuesSum, values, template });\r\n    } else {\r\n      output = `${this.templates[`${template}Default`]}`;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  calculateOneByOne(settings) {\r\n    const { valuesSum, values, template } = settings;\r\n    let output = '';\r\n\r\n    this.outputs.forEach((value, index) => {\r\n      const isFirstsOnlyOne = index === 0 && (valuesSum - values[0] === 0);\r\n      const isSecondOnlyOne = index === 1 && (Number(values[0]) === 0 && Number(values[2]) === 0);\r\n      const isThirdWheel = index === 1 && Number(values[0]) !== 0;\r\n      const isNeedEtc = isSecondOnlyOne || isFirstsOnlyOne || index === 2;\r\n\r\n      const addPunctuationMarks = () => {\r\n        switch (true) {\r\n          case isNeedEtc || isThirdWheel:\r\n            output += '...';\r\n            break;\r\n          default:\r\n            output += ', ';\r\n            break;\r\n        }\r\n      };\r\n\r\n      const addDefinitionToNumber = () => {\r\n        const valueText = value.innerText;\r\n        output += `${valueText} ${this.templates[template][index][0]}${this.definesWordEnd(\r\n          +valueText,\r\n          template,\r\n          index,\r\n        )}`;\r\n        addPunctuationMarks();\r\n      };\r\n\r\n      const isLastNotThird = index === 2 && (+values[0] === 0 || +values[1] === 0);\r\n      const isThirdRequired = isLastNotThird && value.textContent > 0;\r\n      const isValueNotZero = index !== 2 && value.textContent > 0;\r\n\r\n      if (isThirdRequired) {\r\n        addDefinitionToNumber();\r\n      } else if (isValueNotZero) addDefinitionToNumber();\r\n    });\r\n    return output;\r\n  }\r\n\r\n  prepareOneByOne() {\r\n    const valuesSum =\r\n      Number(this.outputs[0].textContent) + Number(this.outputs[1].textContent) + Number(this.outputs[2].textContent);\r\n    const values = this.outputs.map((value) => value.textContent);\r\n    const template = this.container.getAttribute('data-template');\r\n    let output;\r\n\r\n    if (valuesSum > 0) {\r\n      output = this.calculateOneByOne({ valuesSum, values, template });\r\n    } else {\r\n      output = `${this.templates[`${template}Default`]}`;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  refreshInput() {\r\n    let inputText;\r\n    const template = this.container.getAttribute('data-output');\r\n    if (template === 'oneByOne') {\r\n      inputText = this.prepareOneByOne();\r\n    } else if (template === 'twoByOne') {\r\n      inputText = this.prepareTwoByOne();\r\n    } else {\r\n      inputText = this.prepareOutputSum();\r\n    }\r\n    this.input.value = inputText;\r\n  }\r\n\r\n  handlePlusButtonClick(event) {\r\n    const buttonIndex = this.plusButtons.indexOf(event.target);\r\n    const outputTarget = this.outputs[buttonIndex];\r\n\r\n    const refreshListLine = () => {\r\n      if (outputTarget.innerText === '0')\r\n        this.minusButtons[buttonIndex].classList.remove('dropdown__button_transparent');\r\n      outputTarget.innerText = Number(outputTarget.innerText) + 1;\r\n      if (outputTarget.innerText === '10') event.target.classList.add('dropdown__button_transparent');\r\n    };\r\n\r\n    if (outputTarget.innerText < 10) refreshListLine();\r\n\r\n    this.checkClearButtonVisibility();\r\n    this.refreshInput();\r\n  }\r\n\r\n  handleMinusButtonClick(event) {\r\n    const buttonIndex = this.minusButtons.indexOf(event.target);\r\n    const outputTarget = this.outputs[buttonIndex];\r\n\r\n    const refreshListLine = () => {\r\n      if (outputTarget.innerText === '10')\r\n        this.plusButtons[buttonIndex].classList.remove('dropdown__button_transparent');\r\n      outputTarget.innerText = Number(outputTarget.innerText) - 1;\r\n      if (outputTarget.innerText === '0') event.target.classList.add('dropdown__button_transparent');\r\n    };\r\n\r\n    if (outputTarget.innerText > 0) refreshListLine();\r\n\r\n    this.checkClearButtonVisibility();\r\n    this.refreshInput();\r\n  }\r\n\r\n  handleClearButtonClick() {\r\n    this.outputs.forEach((output) => {\r\n      output.textContent = 0;\r\n    });\r\n    this.minusButtons.forEach((button) => {\r\n      button.classList.add('dropdown__button_transparent');\r\n    });\r\n    this.plusButtons.forEach((button) => {\r\n      button.classList.remove('dropdown__button_transparent');\r\n    });\r\n    this.setDefault();\r\n    this.checkClearButtonVisibility();\r\n  }\r\n\r\n  handleInputClick() {\r\n    this.controlDropdownDisplay();\r\n  }\r\n\r\n  handleSubmitButtonClick() {\r\n    this.controlDropdownDisplay();\r\n  }\r\n\r\n  bindEventListeners() {\r\n    this.input.addEventListener('click', this.handleInputClick);\r\n    this.clearButton.addEventListener('click', this.handleClearButtonClick);\r\n    this.submitButton.addEventListener('click', this.handleSubmitButtonClick);\r\n    this.plusButtons.forEach((button) => button.addEventListener('click', this.handlePlusButtonClick));\r\n    this.minusButtons.forEach((button) => button.addEventListener('click', this.handleMinusButtonClick));\r\n  }\r\n}\r\n\r\n\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! auto-bind */ \"../node_modules/auto-bind/index.js\")))\n\n//# sourceURL=webpack:///./blocks/dropdown/Dropdown.js?");

/***/ }),

/***/ "./blocks/dropdown/dropdownInit.js":
/*!*****************************************!*\
  !*** ./blocks/dropdown/dropdownInit.js ***!
  \*****************************************/
/*! exports provided: initAllDropdowns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initAllDropdowns\", function() { return initAllDropdowns; });\n/* harmony import */ var _Dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Dropdown */ \"./blocks/dropdown/Dropdown.js\");\n\r\n\r\nfunction initAllDropdowns() {\r\n  [...document.querySelectorAll('.js-dropdown')].forEach((container) => {\r\n    const templates = {\r\n      rooms: [\r\n        ['спал', 'ьня', 'ьни', 'ен'],\r\n        ['кроват', 'ь', 'и', 'ей'],\r\n        ['ванн', 'ая', 'ые', 'ых'],\r\n      ],\r\n      guestsWithBaby: [\r\n        ['гост', 'ь', 'я', 'ей'],\r\n        ['младен', 'ец', 'ца', 'ев'],\r\n      ],\r\n      guests: ['гост', 'ь', 'я', 'ей'],\r\n      guestsDefault: 'Сколько гостей',\r\n      guestsWithBabyDefault: 'Сколько гостей',\r\n      roomsDefault: 'Конфигурация номера',\r\n    };\r\n    new _Dropdown__WEBPACK_IMPORTED_MODULE_0__[\"Dropdown\"]({ container, templates });\r\n  });\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./blocks/dropdown/dropdownInit.js?");

/***/ })

}]);