(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["landing-page~ui-kit"],{

/***/ "./blocks/datepicker/datepicker.js":
/*!*****************************************!*\
  !*** ./blocks/datepicker/datepicker.js ***!
  \*****************************************/
/*! exports provided: datepickerFunctionality */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"datepickerFunctionality\", function() { return datepickerFunctionality; });\nfunction datepickerFunctionality(settings) {\r\n  const {targetClass, inputFromClass, inputToClass, inputTotalClass, defaultSettings} = settings;\r\n  \r\n  function elementsInitialization() {\r\n    let datepickerBody = document.querySelector(targetClass);\r\n    let inputFrom = document.querySelector(inputFromClass);\r\n    let inputTo = document.querySelector(inputToClass);\r\n    let inputTotal = document.querySelector(inputTotalClass);\r\n    let buttonPrevious = datepickerBody.querySelector(\".js-datepicker__scroll-button_left\");\r\n    let buttonNext = datepickerBody.querySelector(\".js-datepicker__scroll-button_right\");\r\n    let selectedMonth = datepickerBody.querySelector(\".js-datepicker__selected-month\");\r\n    let calendar = datepickerBody.querySelector(\".js-calendar\");\r\n    let calendarLine1 = calendar.querySelector(\".js-calendar__line_num_1\");\r\n    let calendarLine2 = calendar.querySelector(\".js-calendar__line_num_2\");\r\n    let calendarLine3 = calendar.querySelector(\".js-calendar__line_num_3\");\r\n    let calendarLine4 = calendar.querySelector(\".js-calendar__line_num_4\");\r\n    let calendarLine5 = calendar.querySelector(\".js-calendar__line_num_5\");\r\n    let calendarLine6 = calendar.querySelector(\".js-calendar__line_num_6\");\r\n    let clearButton = datepickerBody.querySelector(\".js-datepicker__clear-button\");\r\n    let applyButton = datepickerBody.querySelector(\".js-datepicker__apply-button\");\r\n    \r\n    return {\r\n      datepickerBody,\r\n      inputFrom,\r\n      inputTo,\r\n      inputTotal,\r\n      buttonPrevious,\r\n      buttonNext,\r\n      selectedMonth,\r\n      calendar,\r\n      clearButton,\r\n      applyButton,\r\n      lines: [\r\n        calendarLine1,\r\n        calendarLine2,\r\n        calendarLine3,\r\n        calendarLine4,\r\n        calendarLine5,\r\n        calendarLine6\r\n      ]\r\n    };\r\n  };\r\n\r\n  const {\r\n    datepickerBody,\r\n    inputFrom,\r\n    inputTo,\r\n    inputTotal,\r\n    buttonPrevious,\r\n    buttonNext,\r\n    selectedMonth,\r\n    calendar,\r\n    lines,\r\n    clearButton,\r\n    applyButton,\r\n  } = elementsInitialization();\r\n\r\n  const monthNames = [\r\n    \"Январь\", \"Февраль\", \"Март\",\r\n    \"Апрель\", \"Май\", \"Июнь\",\r\n    \"Июль\", \"Август\", \"Сентябрь\",\r\n    \"Октябрь\", \"Ноябрь\", \"Декабрь\"\r\n  ];\r\n\r\n  let currentInputTarget;\r\n  let currentValueTarget = \"from\";\r\n  inputTotal ? currentInputTarget = inputTotal : currentInputTarget = inputFrom;\r\n\r\n  let pickedYear;\r\n  let pickedMonth;\r\n  let currentDay;\r\n  let from;\r\n  let to;\r\n\r\n  function setsStandardSettings() {\r\n    if (defaultSettings) {\r\n      defaultSettings.hasOwnProperty(\"pickedYear\") ? pickedYear = defaultSettings.pickedYear : false;\r\n      defaultSettings.hasOwnProperty(\"pickedMonth\") ? pickedMonth = defaultSettings.pickedMonth : false;\r\n      defaultSettings.hasOwnProperty(\"currentDay\") ? currentDay = defaultSettings.currentDay : false;\r\n      defaultSettings.hasOwnProperty(\"from\") ? from = defaultSettings.from : false;\r\n      defaultSettings.hasOwnProperty(\"to\") ? to = defaultSettings.to : false;\r\n      defaultSettings.hasOwnProperty(\"total\") ? total = defaultSettings.total : false;\r\n    } else {\r\n      pickedYear = new Date().getFullYear();\r\n      pickedMonth = new Date().getMonth();\r\n      currentDay = new Date()\r\n    };\r\n  };\r\n  setsStandardSettings();\r\n  \r\n  function makesCalendarByDate(data) {\r\n    const {year, month} = data;\r\n    const calendarDays = [];\r\n    function getPreviousMonthDays() {\r\n      let previousDay = new Date(year, month, 0).getDay();\r\n\r\n      for (let i = previousDay- 1; i >= 0; i--) {\r\n        let date = new Date(year, month, -i);\r\n        calendarDays.push(makeCalendarCell(date, \"previous\"))\r\n      };\r\n    };\r\n\r\n    function getCurrentMonthDays() {\r\n      let lastDay = new Date(year, month + 1, 0).getDate();\r\n\r\n      for (let i = 1; i <= lastDay; i++) {\r\n        let date = new Date(year, month, i);\r\n        calendarDays.push(makeCalendarCell(date, false));\r\n      };\r\n    };\r\n\r\n    function getNextMonthDays() {\r\n      let nextMonthDay = new Date(year, month + 1).getDay();\r\n      if(nextMonthDay === 0) {\r\n        nextMonthDay = 7\r\n      };\r\n      let day = 1;\r\n      for (let i = nextMonthDay; i <= 7; i++) {\r\n        let date = new Date(year, month + 1, day);\r\n        calendarDays.push(makeCalendarCell(date, \"next\"));\r\n        day++\r\n      };\r\n    };\r\n\r\n    function makeCalendarCell(date, whatMonth) {\r\n      let calendarCell = document.createElement(\"td\");\r\n      calendarCell.classList.add(\"calendar__cell\");\r\n\r\n      if(whatMonth === \"next\") {\r\n        calendarCell.classList.add(\"calendar__cell_transparent\");\r\n        calendarCell.setAttribute(\"data-month\", \"next\")\r\n      } else if(whatMonth === \"previous\") {\r\n        calendarCell.classList.add(\"calendar__cell_transparent\");\r\n        calendarCell.setAttribute(\"data-month\", \"previous\")\r\n      };\r\n\r\n      function checkMatchByDay(day) {\r\n        return day.getFullYear() == date.getFullYear() && day.getMonth() == date.getMonth() && day.getDate() == date.getDate();\r\n      };\r\n      function checkRangeMatch() {\r\n        return (date >= from && date <= to);\r\n      };\r\n      \r\n      if(checkMatchByDay(currentDay)) {\r\n        calendarCell.classList.add(\"calendar__cell_current-day\");\r\n      };\r\n      if (from) {\r\n        if(checkMatchByDay(from)) {\r\n          calendarCell.classList.add(\"calendar__cell_from\");\r\n        };\r\n      };\r\n      if (to) {\r\n        if(checkMatchByDay(to)) {\r\n          calendarCell.classList.add(\"calendar__cell_to\");\r\n        };\r\n      };\r\n      \r\n      if (from && to) {\r\n        if(checkRangeMatch() && checkMatchByDay(from)) {\r\n          calendarCell.classList.add(\"calendar__cell_range-from\");\r\n        } else if(checkRangeMatch() && checkMatchByDay(to)) {\r\n          calendarCell.classList.add(\"calendar__cell_range-to\");\r\n        } else if(checkRangeMatch()) {\r\n          calendarCell.classList.add(\"calendar__cell_range\");\r\n        };\r\n      };\r\n      \r\n      calendarCell.innerText = date.getDate();\r\n      return calendarCell;\r\n    };\r\n\r\n    if (new Date(year, month).getDay() !== 1) {\r\n      getPreviousMonthDays();\r\n    };\r\n    getCurrentMonthDays();\r\n    if (new Date(year, month + 1, 0).getDay() !== 0) {\r\n      getNextMonthDays();\r\n    };\r\n    \r\n    return calendarDays;\r\n  };\r\n\r\n  function refreshCalendar(days) {\r\n    let line = 0;\r\n    let i = 0;\r\n    while (i < days.length) {\r\n      lines[line].append(days[i]);\r\n      i++;\r\n      if (Number.isInteger(i / 7) && i !== 0) {\r\n        line++;\r\n      };\r\n    };\r\n  };\r\n\r\n  function clearCalendar() {\r\n    lines.map(function(line) {\r\n      line.innerHTML = \"\";\r\n    });\r\n  };\r\n\r\n  function refreshSelectedMonth(month, year) {\r\n    selectedMonth.innerText = `${monthNames[month]} ${year}`;\r\n  };\r\n\r\n  let calendarDays = makesCalendarByDate({year: pickedYear, month: pickedMonth});\r\n  refreshCalendar(calendarDays);\r\n  refreshSelectedMonth(pickedMonth, pickedYear);\r\n\r\n  function bindEventListeners() {\r\n    buttonPrevious.addEventListener(\"click\", previousMonthButtonClick);\r\n    buttonNext.addEventListener(\"click\", nextMonthButtonClick);\r\n    clearButton.addEventListener(\"click\", clearButtonClick);\r\n    applyButton.addEventListener(\"click\", applyButtonClick);\r\n    if (inputFrom) inputFrom.addEventListener(\"click\", inputClick);\r\n    if (inputTo) inputTo.addEventListener(\"click\", inputClick);\r\n    if (inputTotal) inputTotal.addEventListener(\"click\", inputClick);\r\n  };\r\n\r\n  function bindCalendarCellsListener() {\r\n    let calendarCells = [...calendar.querySelectorAll(\"td\")];\r\n    calendarCells.map(function(cell) {\r\n      cell.addEventListener(\"click\", calendarCellClick);\r\n    }); \r\n  };\r\n\r\n  function refreshDatepicker(date) {\r\n    pickedYear = date.getFullYear();\r\n    pickedMonth = date.getMonth();\r\n    clearCalendar();\r\n    let calendarDays = makesCalendarByDate({year: pickedYear, month: pickedMonth});\r\n    refreshCalendar(calendarDays);\r\n    refreshSelectedMonth(pickedMonth, pickedYear);\r\n    bindCalendarCellsListener()\r\n  };\r\n\r\n  function nextMonthButtonClick() {\r\n    let newDate = new Date(pickedYear, pickedMonth + 1);\r\n    refreshDatepicker(newDate);\r\n  };\r\n\r\n  function previousMonthButtonClick() {\r\n    let newDate = new Date(pickedYear, pickedMonth - 1);\r\n    refreshDatepicker(newDate);\r\n  };\r\n\r\n  function clearButtonClick() {\r\n    setsStandardSettings();\r\n    let newDate = new Date(pickedYear, pickedMonth);\r\n    refreshDatepicker(newDate);\r\n  };\r\n\r\n  function applyButtonClick() {\r\n    if(inputFrom || inputTo || inputTotal) datepickerBody.setAttribute(\"hidden\", \"hidden\");\r\n    if(inputFrom) inputFrom.classList.remove(\"input__field_active\");\r\n    if(inputTo) inputTo.classList.remove(\"input__field_active\");\r\n    if(inputTotal) inputTotal.classList.remove(\"input__field_active\");\r\n  };\r\n  \r\n  function inputClick(event) {\r\n    if (datepickerBody.hasAttribute(\"hidden\", \"hidden\")) {\r\n      if(inputFrom) inputFrom.classList.add(\"input__field_active\");\r\n      if(inputTo) inputTo.classList.add(\"input__field_active\");\r\n      if(inputTotal) inputTotal.classList.add(\"input__field_active\");\r\n      datepickerBody.removeAttribute(\"hidden\", \"hidden\")\r\n    } else {\r\n      if(inputFrom) inputFrom.classList.remove(\"input__field_active\");\r\n      if(inputTo) inputTo.classList.remove(\"input__field_active\");\r\n      if(inputTotal) inputTotal.classList.remove(\"input__field_active\");\r\n      datepickerBody.setAttribute(\"hidden\", \"hidden\");\r\n    };\r\n  };\r\n\r\n  function calendarCellClick(event) {\r\n    let target = event.target;\r\n\r\n    function leadsToDoubleDigit(value) {\r\n      if(+value < 10) {\r\n        return `0${value}`;\r\n      } else {\r\n        return `${value}`;\r\n      }; \r\n    }\r\n\r\n    function definesMonthOfSelectedDate() {\r\n      if(target.getAttribute(\"data-month\") === \"next\") {\r\n        return pickedMonth + 2;\r\n      } else if(target.getAttribute(\"data-month\") === \"previous\") {\r\n        return pickedMonth;\r\n      } else {\r\n        return pickedMonth + 1;\r\n      };\r\n    };\r\n\r\n    let monthforOutput = definesMonthOfSelectedDate();\r\n    let date = {\r\n      day: leadsToDoubleDigit(target.innerText),\r\n      month: leadsToDoubleDigit(monthforOutput),\r\n      year: pickedYear\r\n    };\r\n\r\n    let value = `${date.day}.${date.month}.${date.year}`;\r\n\r\n    function checkDateForValidity(value, date) {\r\n      let pickedDate = new Date(date.year, date.month - 1, date.day);\r\n      let nextDate =  new Date(currentDay.getFullYear(), currentDay.getMonth(), currentDay.getDate() + 1);\r\n      if (currentInputTarget === inputFrom && currentInputTarget) {\r\n        if(pickedDate > currentDay) {\r\n           currentInputTarget.setAttribute(\"value\", value);\r\n          from = new Date(date.year, date.month - 1, date.day);\r\n          if(pickedDate > to) {\r\n            inputTo.setAttribute(\"value\", \"\")\r\n            to = undefined;\r\n          }\r\n          currentInputTarget = inputTo;\r\n          refreshDatepicker(new Date(pickedYear, pickedMonth));\r\n        } else {\r\n          alert(\"Дата прибытия должна быть не ранее чем через день от текущей!\");\r\n        };\r\n      } else if(currentInputTarget === inputTo && currentInputTarget) {\r\n        if (from) {\r\n          if (pickedDate > from) {\r\n            currentInputTarget.setAttribute(\"value\", value);\r\n            to = new Date(date.year, date.month - 1, date.day);\r\n            refreshDatepicker(new Date(pickedYear, pickedMonth));\r\n            currentInputTarget = inputFrom;\r\n          } else {\r\n            alert(\"Дата выезда должна быть не ранее чем через день от даты прибытия!\");\r\n          }\r\n        } else {\r\n          if (pickedDate > nextDate) {\r\n            currentInputTarget.setAttribute(\"value\", value);\r\n            to = new Date(date.year, date.month - 1, date.day);\r\n            refreshDatepicker(new Date(pickedYear, pickedMonth));\r\n          } else {\r\n            alert(\"Дата выезда должна быть не ранее чем через два дня от текущей!\");\r\n          }\r\n        };\r\n      } else if(currentInputTarget === inputTotal || !currentInputTarget) {\r\n        if(currentValueTarget === \"from\") {\r\n          if (pickedDate > currentDay) {\r\n            from = new Date(date.year, date.month - 1, date.day);\r\n            currentValueTarget = \"to\";\r\n            if(pickedDate > to) {\r\n              to = undefined;\r\n            }\r\n            refreshDatepicker(new Date(pickedYear, pickedMonth));\r\n          } else {\r\n            alert(\"Дата прибытия должна быть не ранее чем через день от текущей!\");\r\n          }\r\n        } else {\r\n          if (pickedDate > nextDate && pickedDate > from) { \r\n            to = new Date(date.year, date.month - 1, date.day);\r\n            currentValueTarget = \"from\";\r\n            refreshDatepicker(new Date(pickedYear, pickedMonth));\r\n          } else {\r\n            alert(\"Дата выезда должна быть не ранее чем через день от даты прибытия!\");\r\n          }\r\n        };\r\n        let transformedFrom = `${from.getDate()} ${monthNames[from.getMonth()].slice(0, 3).toLowerCase()}`;\r\n        let transformedto = \"...\";\r\n        if(to) transformedto = `${to.getDate()} ${monthNames[to.getMonth()].slice(0, 3).toLowerCase()}`;\r\n        let value = `${transformedFrom} - ${transformedto}`\r\n        if(currentInputTarget) currentInputTarget.setAttribute(\"value\", value);\r\n      };\r\n    };\r\n    checkDateForValidity(value, date);\r\n  };\r\n\r\n  bindEventListeners();\r\n  bindCalendarCellsListener()\r\n};\r\n\r\n\n\n//# sourceURL=webpack:///./blocks/datepicker/datepicker.js?");

/***/ }),

/***/ "./blocks/dropdown/dropdown.js":
/*!*************************************!*\
  !*** ./blocks/dropdown/dropdown.js ***!
  \*************************************/
/*! exports provided: dropdownFunctionality */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dropdownFunctionality\", function() { return dropdownFunctionality; });\nfunction dropdownFunctionality(settings) {\r\n  const {\r\n    inputClass,\r\n    dropdownClass,\r\n    inputResultTemplate,\r\n    defaultTemplate,\r\n  } = settings;\r\n  \r\n  function getHtmlElements() {\r\n    const input = document.querySelector(inputClass);\r\n    const dropdown = document.querySelector(dropdownClass);\r\n    return {input, dropdown}\r\n  };\r\n\r\n  function writeDefaultValues(dropdown) {\r\n    const defaultValues = [];\r\n\r\n    let outputs = [...dropdown.querySelectorAll(\"output\")];\r\n    outputs.map(function(output) {\r\n      defaultValues.push(output.innerText)  \r\n    })\r\n    \r\n    return defaultValues;\r\n  };\r\n\r\n  const resultElements = getHtmlElements();\r\n  const {input, dropdown} = resultElements;\r\n  const dropdownButtons = [...dropdown.querySelectorAll(\"button\")];\r\n  const defaultValues = writeDefaultValues(dropdown);\r\n\r\n  function bindEventListeners() {\r\n    input.addEventListener(\"click\", discloseDropdown);\r\n    dropdownButtons.map(function(button) {\r\n      button.addEventListener(\"click\", implementsButtonsFunctionality)\r\n    })\r\n  };\r\n\r\n  function discloseDropdown(event) {\r\n    if(dropdown.hasAttribute(\"hidden\")) {\r\n      dropdown.removeAttribute(\"hidden\");\r\n      input.parentNode.parentNode.parentNode.classList.add(\"dropdown__input_expanded\");\r\n    } else {\r\n      dropdown.setAttribute(\"hidden\", \"hidden\");\r\n      input.parentNode.parentNode.parentNode.classList.remove(\"dropdown__input_expanded\");\r\n    };\r\n  };\r\n\r\n  function implementsButtonsFunctionality(event) {\r\n    const button = event.target;\r\n\r\n    function definesModifiesOutput(button) {\r\n      const target = button.getAttribute(\"data-target\");\r\n\r\n      function getDesiredOutput(target) {\r\n        let result;\r\n        [...dropdown.querySelectorAll(\"output\")].map(function(out) {\r\n          if(out.getAttribute(\"data-target\") == target) {result = out};\r\n        });\r\n        return result;\r\n      };\r\n\r\n      const output = getDesiredOutput(target);\r\n      const action = button.getAttribute(\"data-action\");\r\n\r\n      function checkAdditionPossinility(action) {\r\n        return (action === \"plus\") && (Number(output.innerText) < 10)\r\n      };\r\n      function checkSubtractionPossinility(action) {\r\n        return (action === \"minus\") && (Number(output.innerText) > 0)\r\n      };\r\n      function isButtonTransparent(button, action) {\r\n        return (button.classList.contains(\"dropdown__button_transparent\")) && (button.getAttribute(\"data-action\") == action && button.getAttribute(\"data-target\") == target);\r\n      };\r\n\r\n      function removeTransparentClass(action, num, target) {\r\n        if(Number(output.innerText) == num) {\r\n          [...dropdown.querySelectorAll(\"button\")].map(function(button) {\r\n            if(isButtonTransparent(button, action, target)) {\r\n              button.classList.remove(\"dropdown__button_transparent\");\r\n            };\r\n          });\r\n        };\r\n      };\r\n\r\n      if(checkAdditionPossinility(action)) {\r\n        if(Number(output.innerText) == 0) {\r\n          const target = button.getAttribute(\"data-rarget\");\r\n          removeTransparentClass(\"minus\", 0, target);\r\n        };\r\n        output.innerText = Number(output.innerText) + 1;\r\n        input.setAttribute(`data-${target}`, output.innerText);\r\n        if(Number(output.innerText) == 10) {\r\n          button.classList.add('dropdown__button_transparent');\r\n        };\r\n      } else if (checkSubtractionPossinility(action)) {\r\n        if(Number(output.innerText) == 10) {\r\n          const target = button.getAttribute(\"data-rarget\");\r\n          removeTransparentClass(\"plus\", 10, target);\r\n        };\r\n        output.innerText = Number(output.innerText) - 1;\r\n        input.setAttribute(`data-${target}`, output.innerText);\r\n        if(Number(output.innerText) == 0) {\r\n          button.classList.add('dropdown__button_transparent');\r\n        };\r\n      };\r\n    };\r\n    \r\n    function refreshInput(input) {\r\n      function getOutputValues() {\r\n        let result = [];\r\n        let i = 1;\r\n        [...dropdown.querySelectorAll(\"output\")].map(function(output) {\r\n          result.push(Number(output.innerText));\r\n          i++;\r\n        });\r\n        return result;\r\n      }\r\n  \r\n      const outputVal = getOutputValues();\r\n  \r\n      function setToZero(arr) {\r\n        return arr.every(function(val) {\r\n          return val == 0}\r\n        );\r\n      };\r\n      \r\n      if(setToZero(outputVal)) {\r\n        input.setAttribute(\"value\", defaultTemplate);\r\n        dropdownButtons.map(function(button) {\r\n          if (button.getAttribute(\"data-action\") === 'minus') button.classList.add('dropdown__button_transparent');\r\n        });\r\n      } else {\r\n        dropdownButtons.map(function(button) {\r\n          if (button.getAttribute(\"data-target\") === 'clear') button.removeAttribute(\"hidden\")\r\n        });\r\n\r\n        let result = \"\";\r\n        if(inputResultTemplate.type === 'oneByOne') {\r\n          for(let i = 0; i < outputVal.length; i++) {\r\n            if (inputResultTemplate.values.length < outputVal.length && i == Number(inputResultTemplate.values.length - 1)) {\r\n              result += `${outputVal[i]} ${inputResultTemplate.values[i]}...`\r\n              break\r\n            } else {\r\n              result += `${outputVal[i]} ${inputResultTemplate.values[i]}, `\r\n            };\r\n          };\r\n        } else if(inputResultTemplate.type === 'sum') {\r\n          outputVal.map(function(value) {\r\n            result = Number(result) + value;\r\n          });\r\n          result = String(result) + \" \" + String(inputResultTemplate.values)\r\n        };\r\n        input.setAttribute(\"value\", result);\r\n      }\r\n    };\r\n\r\n    function setDefaultValues(dropdown) {\r\n      let outputs = [...dropdown.querySelectorAll(\"output\")];\r\n      let i = 0;\r\n      outputs.map(function(output) {\r\n        output.innerText = defaultValues[i];\r\n        i++\r\n      });\r\n    }\r\n\r\n    if (button.getAttribute(\"data-target\") === \"clear\") {\r\n      setDefaultValues(dropdown)\r\n      refreshInput(input);\r\n      button.setAttribute(\"hidden\", \"hidden\")\r\n    } else if (button.getAttribute(\"data-target\") === \"submit\") {\r\n      discloseDropdown()\r\n    } else {\r\n      definesModifiesOutput(button);\r\n      refreshInput(input);\r\n    };\r\n  };\r\n  bindEventListeners();\r\n};\r\n\r\n\n\n//# sourceURL=webpack:///./blocks/dropdown/dropdown.js?");

/***/ })

}]);