(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["landing-page~room-details~search-room~ui-kit"],{

/***/ "./blocks/datepicker/datepicker.js":
/*!*****************************************!*\
  !*** ./blocks/datepicker/datepicker.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return datepickerFunctionality; });\nfunction datepickerFunctionality(settings) {\r\n  const { targetClass, inputFromClass, inputToClass, inputTotalClass, defaultSettings, size } = settings;\r\n\r\n  function elementsInitialization() {\r\n    const datepickerBody = document.querySelector(targetClass);\r\n    const inputFrom = document.querySelector(inputFromClass);\r\n    const inputTo = document.querySelector(inputToClass);\r\n    const inputTotal = document.querySelector(inputTotalClass);\r\n    const buttonPrevious = datepickerBody.querySelector('.js-datepicker__scroll-button_left');\r\n    const buttonNext = datepickerBody.querySelector('.js-datepicker__scroll-button_right');\r\n    const selectedMonth = datepickerBody.querySelector('.js-datepicker__selected-month');\r\n    const calendar = datepickerBody.querySelector('.js-datepicker__calendar');\r\n    const calendarLine1 = calendar.querySelector('.js-datepicker__calendar-line_num_1');\r\n    const calendarLine2 = calendar.querySelector('.js-datepicker__calendar-line_num_2');\r\n    const calendarLine3 = calendar.querySelector('.js-datepicker__calendar-line_num_3');\r\n    const calendarLine4 = calendar.querySelector('.js-datepicker__calendar-line_num_4');\r\n    const calendarLine5 = calendar.querySelector('.js-datepicker__calendar-line_num_5');\r\n    const calendarLine6 = calendar.querySelector('.js-datepicker__calendar-line_num_6');\r\n    const clearButton = datepickerBody.querySelector('.js-datepicker__clear-button');\r\n    const applyButton = datepickerBody.querySelector('.js-datepicker__apply-button');\r\n\r\n    return {\r\n      datepickerBody,\r\n      inputFrom,\r\n      inputTo,\r\n      inputTotal,\r\n      buttonPrevious,\r\n      buttonNext,\r\n      selectedMonth,\r\n      calendar,\r\n      clearButton,\r\n      applyButton,\r\n      lines: [calendarLine1, calendarLine2, calendarLine3, calendarLine4, calendarLine5, calendarLine6],\r\n    };\r\n  }\r\n\r\n  const {\r\n    datepickerBody,\r\n    inputFrom,\r\n    inputTo,\r\n    inputTotal,\r\n    buttonPrevious,\r\n    buttonNext,\r\n    selectedMonth,\r\n    calendar,\r\n    lines,\r\n    clearButton,\r\n    applyButton,\r\n  } = elementsInitialization();\r\n\r\n  const monthNames = [\r\n    'Январь',\r\n    'Февраль',\r\n    'Март',\r\n    'Апрель',\r\n    'Май',\r\n    'Июнь',\r\n    'Июль',\r\n    'Август',\r\n    'Сентябрь',\r\n    'Октябрь',\r\n    'Ноябрь',\r\n    'Декабрь',\r\n  ];\r\n\r\n  let currentInputTarget = inputFrom;\r\n  if (inputTotal) currentInputTarget = inputTotal;\r\n  let currentValueTarget = 'from';\r\n\r\n  let pickedYear;\r\n  let pickedMonth;\r\n  let currentDay;\r\n  let from;\r\n  let to;\r\n\r\n  function setsStandardSettings() {\r\n    if (defaultSettings) {\r\n      if (Object.prototype.hasOwnProperty.call(defaultSettings, 'pickedYear')) pickedYear = defaultSettings.pickedYear;\r\n      if (Object.prototype.hasOwnProperty.call(defaultSettings, 'pickedMonth'))\r\n        pickedMonth = defaultSettings.pickedMonth;\r\n      if (Object.prototype.hasOwnProperty.call(defaultSettings, 'currentDay')) currentDay = defaultSettings.currentDay;\r\n      if (Object.prototype.hasOwnProperty.call(defaultSettings, 'from')) from = defaultSettings.from;\r\n      if (Object.prototype.hasOwnProperty.call(defaultSettings, 'to')) to = defaultSettings.to;\r\n    } else {\r\n      pickedYear = new Date().getFullYear();\r\n      pickedMonth = new Date().getMonth();\r\n      currentDay = new Date();\r\n      from = undefined;\r\n      to = undefined;\r\n    }\r\n  }\r\n\r\n  setsStandardSettings();\r\n\r\n  function makesCalendarByDate(data) {\r\n    const { year, month } = data;\r\n    const calendarDays = [];\r\n\r\n    function makeCalendarCell(date, whatMonth) {\r\n      const calendarCell = document.createElement('td');\r\n      calendarCell.classList.add('datepicker__calendar-cell');\r\n\r\n      if (size === 'm') {\r\n        calendarCell.classList.add('datepicker__calendar-cell_size_m');\r\n      }\r\n\r\n      if (whatMonth === 'next') {\r\n        calendarCell.classList.add('datepicker__calendar-cell_transparent');\r\n        calendarCell.setAttribute('data-month', 'next');\r\n      } else if (whatMonth === 'previous') {\r\n        calendarCell.classList.add('datepicker__calendar-cell_transparent');\r\n        calendarCell.setAttribute('data-month', 'previous');\r\n      }\r\n\r\n      function checkMatchByDay(day) {\r\n        return (\r\n          day.getFullYear() === date.getFullYear() &&\r\n          day.getMonth() === date.getMonth() &&\r\n          day.getDate() === date.getDate()\r\n        );\r\n      }\r\n\r\n      function checkRangeMatch() {\r\n        return date >= from && date <= to;\r\n      }\r\n\r\n      if (checkMatchByDay(currentDay)) {\r\n        calendarCell.classList.add('datepicker__calendar-cell_current-day');\r\n      }\r\n\r\n      if (from) {\r\n        if (checkMatchByDay(from)) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_from');\r\n        }\r\n      }\r\n\r\n      if (to) {\r\n        if (checkMatchByDay(to)) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_to');\r\n        }\r\n      }\r\n\r\n      if (from && to) {\r\n        if (checkRangeMatch() && checkMatchByDay(from)) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_range-from');\r\n        } else if (checkRangeMatch() && checkMatchByDay(to)) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_range-to');\r\n        } else if (checkRangeMatch()) {\r\n          calendarCell.classList.add('datepicker__calendar-cell_range');\r\n        }\r\n      }\r\n\r\n      calendarCell.innerText = date.getDate();\r\n      return calendarCell;\r\n    }\r\n\r\n    function getPreviousMonthDays() {\r\n      const previousDay = new Date(year, month, 0).getDay();\r\n\r\n      for (let i = previousDay - 1; i >= 0; i -= 1) {\r\n        const date = new Date(year, month, -i);\r\n        calendarDays.push(makeCalendarCell(date, 'previous'));\r\n      }\r\n    }\r\n\r\n    function getCurrentMonthDays() {\r\n      const lastDay = new Date(year, month + 1, 0).getDate();\r\n\r\n      for (let i = 1; i <= lastDay; i += 1) {\r\n        const date = new Date(year, month, i);\r\n        calendarDays.push(makeCalendarCell(date, false));\r\n      }\r\n    }\r\n\r\n    function getNextMonthDays() {\r\n      let nextMonthDay = new Date(year, month + 1).getDay();\r\n\r\n      if (nextMonthDay === 0) {\r\n        nextMonthDay = 7;\r\n      }\r\n\r\n      let day = 1;\r\n      for (let i = nextMonthDay; i <= 7; i += 1) {\r\n        const date = new Date(year, month + 1, day);\r\n        calendarDays.push(makeCalendarCell(date, 'next'));\r\n        day += 1;\r\n      }\r\n    }\r\n\r\n    if (new Date(year, month).getDay() !== 1) {\r\n      getPreviousMonthDays();\r\n    }\r\n\r\n    getCurrentMonthDays();\r\n\r\n    if (new Date(year, month + 1, 0).getDay() !== 0) {\r\n      getNextMonthDays();\r\n    }\r\n\r\n    return calendarDays;\r\n  }\r\n\r\n  function refreshCalendar(days) {\r\n    let line = 0;\r\n    let i = 0;\r\n\r\n    while (i < days.length) {\r\n      lines[line].append(days[i]);\r\n      i += 1;\r\n      if (Number.isInteger(i / 7) && i !== 0) {\r\n        line += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  function clearCalendar() {\r\n    lines.forEach((item) => {\r\n      const line = item;\r\n      line.innerHTML = '';\r\n    });\r\n  }\r\n\r\n  function refreshSelectedMonth(month, year) {\r\n    selectedMonth.innerText = `${monthNames[month]} ${year}`;\r\n  }\r\n\r\n  const calendarDays = makesCalendarByDate({ year: pickedYear, month: pickedMonth });\r\n  refreshCalendar(calendarDays);\r\n  refreshSelectedMonth(pickedMonth, pickedYear);\r\n\r\n  function checkDateForValidity(value, date) {\r\n    const pickedDate = new Date(date.year, date.month - 1, date.day);\r\n    const nextDate = new Date(currentDay.getFullYear(), currentDay.getMonth(), currentDay.getDate() + 1);\r\n    let result = false;\r\n\r\n    if (currentInputTarget === inputFrom && currentInputTarget) {\r\n      if (pickedDate > currentDay) {\r\n        currentInputTarget.setAttribute('value', value);\r\n        from = new Date(date.year, date.month - 1, date.day);\r\n\r\n        if (pickedDate > to) {\r\n          inputTo.setAttribute('value', '');\r\n          to = undefined;\r\n        }\r\n\r\n        currentInputTarget = inputTo;\r\n        result = true;\r\n      }\r\n    } else if (currentInputTarget === inputTo && currentInputTarget) {\r\n      if (from) {\r\n        if (pickedDate > from) {\r\n          currentInputTarget.setAttribute('value', value);\r\n          to = new Date(date.year, date.month - 1, date.day);\r\n          currentInputTarget = inputFrom;\r\n          result = true;\r\n        }\r\n      } else if (pickedDate > nextDate) {\r\n        currentInputTarget.setAttribute('value', value);\r\n        to = new Date(date.year, date.month - 1, date.day);\r\n        result = true;\r\n      }\r\n    } else if (currentInputTarget === inputTotal || !currentInputTarget) {\r\n      if (currentValueTarget === 'from') {\r\n        if (pickedDate > currentDay) {\r\n          from = new Date(date.year, date.month - 1, date.day);\r\n          currentValueTarget = 'to';\r\n          if (pickedDate > to) {\r\n            to = undefined;\r\n          }\r\n          result = true;\r\n        }\r\n      } else if (pickedDate > nextDate && pickedDate > from) {\r\n        to = new Date(date.year, date.month - 1, date.day);\r\n        currentValueTarget = 'from';\r\n        result = true;\r\n      }\r\n      const transformedFrom = `${from.getDate()} ${monthNames[from.getMonth()].slice(0, 3).toLowerCase()}`;\r\n      let transformedto = '...';\r\n      if (to) transformedto = `${to.getDate()} ${monthNames[to.getMonth()].slice(0, 3).toLowerCase()}`;\r\n      const mainValue = `${transformedFrom} - ${transformedto}`;\r\n      if (currentInputTarget) currentInputTarget.setAttribute('value', mainValue);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function calendarCellClick(event) {\r\n    const { target } = event;\r\n\r\n    function leadsToDoubleDigit(value) {\r\n      if (+value < 10) {\r\n        return `0${value}`;\r\n      }\r\n      return `${value}`;\r\n    }\r\n\r\n    function definesMonthOfSelectedDate() {\r\n      if (target.getAttribute('data-month') === 'next') {\r\n        return pickedMonth + 2;\r\n      }\r\n      if (target.getAttribute('data-month') === 'previous') {\r\n        return pickedMonth;\r\n      }\r\n      return pickedMonth + 1;\r\n    }\r\n\r\n    const monthforOutput = definesMonthOfSelectedDate();\r\n    const date = {\r\n      day: leadsToDoubleDigit(target.innerText),\r\n      month: leadsToDoubleDigit(monthforOutput),\r\n      year: pickedYear,\r\n    };\r\n\r\n    const value = `${date.day}.${date.month}.${date.year}`;\r\n\r\n    const result = checkDateForValidity(value, date);\r\n    if (result) {\r\n      pickedYear = new Date(pickedYear, pickedMonth).getFullYear();\r\n      pickedMonth = new Date(pickedYear, pickedMonth).getMonth();\r\n      clearCalendar();\r\n      const days = makesCalendarByDate({ year: pickedYear, month: pickedMonth });\r\n      refreshCalendar(days);\r\n      refreshSelectedMonth(pickedMonth, pickedYear);\r\n    }\r\n\r\n    const calendarCells = [...calendar.querySelectorAll('td')];\r\n    calendarCells.forEach((item) => {\r\n      const cell = item;\r\n      cell.addEventListener('click', calendarCellClick);\r\n    });\r\n  }\r\n\r\n  function bindCalendarCellsListener() {\r\n    const calendarCells = [...calendar.querySelectorAll('td')];\r\n\r\n    calendarCells.forEach((item) => {\r\n      const cell = item;\r\n      cell.addEventListener('click', calendarCellClick);\r\n    });\r\n  }\r\n\r\n  function refreshDatepicker(date) {\r\n    pickedYear = date.getFullYear();\r\n    pickedMonth = date.getMonth();\r\n    clearCalendar();\r\n    const days = makesCalendarByDate({ year: pickedYear, month: pickedMonth });\r\n    refreshCalendar(days);\r\n    refreshSelectedMonth(pickedMonth, pickedYear);\r\n    bindCalendarCellsListener();\r\n  }\r\n\r\n  function nextMonthButtonClick() {\r\n    const newDate = new Date(pickedYear, pickedMonth + 1);\r\n    refreshDatepicker(newDate);\r\n  }\r\n\r\n  function previousMonthButtonClick() {\r\n    const newDate = new Date(pickedYear, pickedMonth - 1);\r\n    refreshDatepicker(newDate);\r\n  }\r\n\r\n  function inputsExists() {\r\n    return inputTotal || inputFrom || inputTo;\r\n  }\r\n\r\n  function clearButtonClick() {\r\n    if (from) {\r\n      from = undefined;\r\n    }\r\n\r\n    if (to) {\r\n      to = undefined;\r\n    }\r\n\r\n    if (inputsExists()) {\r\n      if (currentInputTarget === inputTotal) {\r\n        inputTotal.setAttribute('value', 'ДД.ММ - ДД.ММ');\r\n      } else {\r\n        inputFrom.setAttribute('value', 'ДД.ММ.ГГГГ');\r\n        inputTo.setAttribute('value', 'ДД.ММ.ГГГГ');\r\n        currentInputTarget = inputFrom;\r\n      }\r\n    }\r\n    currentValueTarget = 'from';\r\n    refreshDatepicker(new Date(pickedYear, pickedMonth));\r\n  }\r\n\r\n  function applyButtonClick() {\r\n    if (inputsExists()) datepickerBody.setAttribute('hidden', 'hidden');\r\n    if (inputFrom) inputFrom.classList.remove('input__field_active');\r\n    if (inputTo) inputTo.classList.remove('input__field_active');\r\n    if (inputTotal) inputTotal.classList.remove('input__field_active');\r\n  }\r\n\r\n  function inputClick() {\r\n    if (datepickerBody.hasAttribute('hidden', 'hidden')) {\r\n      if (inputFrom) inputFrom.classList.add('input__field_active');\r\n      if (inputTo) inputTo.classList.add('input__field_active');\r\n      if (inputTotal) inputTotal.classList.add('input__field_active');\r\n      datepickerBody.removeAttribute('hidden', 'hidden');\r\n    } else {\r\n      if (inputFrom) inputFrom.classList.remove('input__field_active');\r\n      if (inputTo) inputTo.classList.remove('input__field_active');\r\n      if (inputTotal) inputTotal.classList.remove('input__field_active');\r\n      datepickerBody.setAttribute('hidden', 'hidden');\r\n    }\r\n  }\r\n\r\n  function bindEventListeners() {\r\n    buttonPrevious.addEventListener('click', previousMonthButtonClick);\r\n    buttonNext.addEventListener('click', nextMonthButtonClick);\r\n    clearButton.addEventListener('click', clearButtonClick);\r\n    applyButton.addEventListener('click', applyButtonClick);\r\n    if (inputFrom) inputFrom.addEventListener('click', inputClick);\r\n    if (inputTo) inputTo.addEventListener('click', inputClick);\r\n    if (inputTotal) inputTotal.addEventListener('click', inputClick);\r\n  }\r\n\r\n  bindEventListeners();\r\n  bindCalendarCellsListener();\r\n}\n\n//# sourceURL=webpack:///./blocks/datepicker/datepicker.js?");

/***/ }),

/***/ "./blocks/dropdown/dropdown.js":
/*!*************************************!*\
  !*** ./blocks/dropdown/dropdown.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return dropdownFunctionality; });\nfunction dropdownFunctionality(settings) {\r\n  const { inputClass, dropdownClass, inputResultTemplate, defaultTemplate } = settings;\r\n\r\n  function getHtmlElements() {\r\n    const input = document.querySelector(inputClass);\r\n    const dropdown = document.querySelector(dropdownClass);\r\n    return { input, dropdown };\r\n  }\r\n\r\n  const resultElements = getHtmlElements();\r\n  const { input, dropdown } = resultElements;\r\n  const dropdownButtons = [...dropdown.querySelectorAll('button')];\r\n  const defaultValues = [0, 0, 0];\r\n\r\n  function checkClearButtonVisibility() {\r\n    let a = 0;\r\n\r\n    [...dropdown.querySelectorAll('output')].forEach((output) => {\r\n      a += Number(output.innerText);\r\n    });\r\n\r\n    dropdownButtons.forEach((button) => {\r\n      if (button.getAttribute('data-target') === 'clear' && a > 0) button.removeAttribute('hidden');\r\n    });\r\n  }\r\n\r\n  function discloseDropdown() {\r\n    if (dropdown.hasAttribute('hidden')) {\r\n      dropdown.removeAttribute('hidden');\r\n      input.classList.add('input__field_expanded');\r\n    } else {\r\n      dropdown.setAttribute('hidden', 'hidden');\r\n      input.classList.remove('input__field_expanded');\r\n    }\r\n  }\r\n\r\n  function implementsButtonsFunctionality(event) {\r\n    const button = event.target;\r\n\r\n    function definesModifiesOutput(elem) {\r\n      const target = elem.getAttribute('data-target');\r\n\r\n      function getDesiredOutput(targOut) {\r\n        let result;\r\n\r\n        [...dropdown.querySelectorAll('output')].forEach((out) => {\r\n          if (out.getAttribute('data-target') === targOut) {\r\n            result = out;\r\n          }\r\n        });\r\n\r\n        return result;\r\n      }\r\n\r\n      const output = getDesiredOutput(target);\r\n      const action = button.getAttribute('data-action');\r\n\r\n      function checkAdditionPossinility(addAction) {\r\n        return addAction === 'plus' && Number(output.innerText) < 10;\r\n      }\r\n\r\n      function checkSubtractionPossinility(subAction) {\r\n        return subAction === 'minus' && Number(output.innerText) > 0;\r\n      }\r\n\r\n      function isButtonTransparent(transfButton, transfAction) {\r\n        return (\r\n          transfButton.classList.contains('dropdown__button_transparent') &&\r\n          transfButton.getAttribute('data-action') === transfAction &&\r\n          transfButton.getAttribute('data-target') === target\r\n        );\r\n      }\r\n\r\n      function removeTransparentClass(removeAction, num, removeTarget) {\r\n        if (Number(output.innerText) === num) {\r\n          [...dropdown.querySelectorAll('button')].forEach((removeButtons) => {\r\n            if (isButtonTransparent(removeButtons, removeAction, removeTarget)) {\r\n              removeButtons.classList.remove('dropdown__button_transparent');\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (checkAdditionPossinility(action)) {\r\n        if (Number(output.innerText) === 0) {\r\n          const currTarget = button.getAttribute('data-rarget');\r\n          removeTransparentClass('minus', 0, currTarget);\r\n        }\r\n        output.innerText = Number(output.innerText) + 1;\r\n        input.setAttribute(`data-${target}`, output.innerText);\r\n        if (Number(output.innerText) === 10) {\r\n          button.classList.add('dropdown__button_transparent');\r\n        }\r\n      } else if (checkSubtractionPossinility(action)) {\r\n        if (Number(output.innerText) === 10) {\r\n          const currTarget = button.getAttribute('data-rarget');\r\n          removeTransparentClass('plus', 10, currTarget);\r\n        }\r\n        output.innerText = Number(output.innerText) - 1;\r\n        input.setAttribute(`data-${target}`, output.innerText);\r\n        if (Number(output.innerText) === 0) {\r\n          button.classList.add('dropdown__button_transparent');\r\n        }\r\n      }\r\n    }\r\n\r\n    function refreshInput(inputForRefreshing) {\r\n      function getOutputValues() {\r\n        const result = [];\r\n\r\n        [...dropdown.querySelectorAll('output')].forEach((output) => {\r\n          result.push(Number(output.innerText));\r\n        });\r\n\r\n        return result;\r\n      }\r\n\r\n      const outputVal = getOutputValues();\r\n\r\n      function setToZero(arr) {\r\n        return arr.every((val) => val === 0);\r\n      }\r\n\r\n      if (setToZero(outputVal)) {\r\n        inputForRefreshing.setAttribute('value', defaultTemplate);\r\n\r\n        dropdownButtons.forEach((zeroButton) => {\r\n          if (zeroButton.getAttribute('data-action') === 'minus') {\r\n            zeroButton.classList.add('dropdown__button_transparent');\r\n          }\r\n\r\n          if (\r\n            zeroButton.getAttribute('data-action') === 'plus' &&\r\n            zeroButton.classList.contains('dropdown__button_transparent')\r\n          ) {\r\n            zeroButton.classList.remove('dropdown__button_transparent');\r\n          }\r\n\r\n          if (zeroButton.getAttribute('data-target') === 'clear') zeroButton.setAttribute('hidden', 'hidden');\r\n        });\r\n      } else {\r\n        dropdownButtons.forEach((simpButton) => {\r\n          if (simpButton.getAttribute('data-target') === 'clear') simpButton.removeAttribute('hidden');\r\n        });\r\n\r\n        let result = '';\r\n        if (inputResultTemplate.type === 'oneByOne') {\r\n          for (let i = 0; i < outputVal.length; i += 1) {\r\n            if (\r\n              inputResultTemplate.values.length < outputVal.length &&\r\n              i === Number(inputResultTemplate.values.length - 1)\r\n            ) {\r\n              result += `${outputVal[i]} ${inputResultTemplate.values[i]}...`;\r\n              break;\r\n            } else {\r\n              result += `${outputVal[i]} ${inputResultTemplate.values[i]}, `;\r\n            }\r\n          }\r\n        } else if (inputResultTemplate.type === 'sum') {\r\n          outputVal.forEach((value) => {\r\n            result = Number(result) + value;\r\n          });\r\n\r\n          result = `${String(result)} ${String(inputResultTemplate.values)}`;\r\n        } else if (inputResultTemplate.type === 'twoByOne') {\r\n          for (let i = 0; i < outputVal.length; i += 1) {\r\n            if (\r\n              inputResultTemplate.values.length < outputVal.length &&\r\n              i === Number(inputResultTemplate.values.length - 1)\r\n            ) {\r\n              result += `${outputVal[i + 1]} ${inputResultTemplate.values[i]}`;\r\n              break;\r\n            } else {\r\n              result += `${outputVal[i] + outputVal[i + 1]} ${inputResultTemplate.values[i]}, `;\r\n            }\r\n          }\r\n        }\r\n        inputForRefreshing.setAttribute('value', result);\r\n      }\r\n    }\r\n\r\n    function setDefaultValues(container) {\r\n      const outputs = [...container.querySelectorAll('output')];\r\n      let i = 0;\r\n\r\n      outputs.forEach((outputForEditing) => {\r\n        const output = outputForEditing;\r\n        output.innerText = defaultValues[i];\r\n        i += 1;\r\n      });\r\n    }\r\n\r\n    if (button.getAttribute('data-target') === 'clear') {\r\n      setDefaultValues(dropdown);\r\n      refreshInput(input);\r\n      button.setAttribute('hidden', 'hidden');\r\n    } else if (button.getAttribute('data-target') === 'submit') {\r\n      discloseDropdown();\r\n    } else {\r\n      definesModifiesOutput(button);\r\n      refreshInput(input);\r\n    }\r\n  }\r\n\r\n  function bindEventListeners() {\r\n    input.addEventListener('click', discloseDropdown);\r\n    dropdownButtons.forEach((button) => {\r\n      button.addEventListener('click', implementsButtonsFunctionality);\r\n    });\r\n  }\r\n\r\n  checkClearButtonVisibility();\r\n  bindEventListeners();\r\n}\n\n//# sourceURL=webpack:///./blocks/dropdown/dropdown.js?");

/***/ })

}]);